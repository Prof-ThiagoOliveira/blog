<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thiago de Paula Oliveira | Thiago Oliveira</title>
    <link>https://prof-thiagooliveira.netlify.com/author/thiago-de-paula-oliveira/</link>
      <atom:link href="https://prof-thiagooliveira.netlify.com/author/thiago-de-paula-oliveira/index.xml" rel="self" type="application/rss+xml" />
    <description>Thiago de Paula Oliveira</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Thiago Oliviera</copyright><lastBuildDate>Sat, 06 Jan 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://prof-thiagooliveira.netlify.com/author/thiago-de-paula-oliveira/avatar_hu9353ec15fa579d9456130373dd41bde0_1211788_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Thiago de Paula Oliveira</title>
      <link>https://prof-thiagooliveira.netlify.com/author/thiago-de-paula-oliveira/</link>
    </image>
    
    <item>
      <title>R Programming with Efficient Snippets</title>
      <link>https://prof-thiagooliveira.netlify.com/post/r-programming/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/post/r-programming/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p align=&#34;justify&#34;&gt;
In &lt;code&gt;R&lt;/code&gt; programming, efficiency is key. Snippets, small reusable blocks of code, are a cornerstone in achieving this. This post delves into the world of snippets, offering both novice and seasoned &lt;code&gt;R&lt;/code&gt; programmers insights into their power and versatility.
&lt;/p&gt;
&lt;div id=&#34;what-are-snippets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What are Snippets?&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
In &lt;code&gt;R&lt;/code&gt; programming, snippets are more than just pre-written bits of code; they are dynamic templates designed to streamline code writing and editing. Snippets in R can contain placeholders, which are special fields that can be easily tabbed through and filled in by the programmer. This feature allows for rapid customization of the snippet to fit specific coding needs. They can encapsulate complex coding patterns, data structures, and algorithms, making them particularly useful for tasks that require adherence to specific coding standards or methodologies.
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
Snippets can be simple, such as a line to import a commonly used library, or complex, containing entire functions or control structures. They support variable interpolation, enabling the inclusion of dynamic content like dates, user names, or contextual code. Advanced snippets may even include scriptable transformations of the inserted text, allowing for sophisticated code generation based on the user’s input.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;advantages-of-using-snippets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Advantages of Using Snippets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Enhanced Productivity&lt;/strong&gt;: Snippets go beyond automating repetitive code insertion. They serve as a framework for implementing best practices and methodologies, significantly reducing the cognitive load on the programmer. By providing ready-to-use code templates, they allow programmers to focus on the unique aspects of their work, rather than the boilerplate code.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Error Reduction&lt;/strong&gt;: The use of snippets minimizes syntax and logical errors not just through standardization, but also by embedding proven and tested code patterns. This is especially beneficial in complex programming tasks where the risk of introducing errors is high. It ensures that the fundamental building blocks of the code are sound, allowing programmers to concentrate on higher-level logic and functionality.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Code Consistency&lt;/strong&gt;: In collaborative projects, maintaining a consistent coding style and structure is vital for readability and maintainability. Snippets enforce a uniform coding convention, which is crucial when working in teams or when codebases are passed between different developers. They help in aligning the code with organizational or community standards, making the code more accessible and understandable to all team members.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Rapid Prototyping and Experimentation&lt;/strong&gt;: Snippets enable quick assembly of code constructs, facilitating rapid prototyping and experimentation. This is particularly valuable in data science and statistical analysis, where various approaches and methods are often tested in quick succession.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Educational Tool&lt;/strong&gt;: For learners of R programming, snippets act as an educational tool, demonstrating best practices and exposing them to different coding styles and patterns. It accelerates the learning curve by providing examples of well-structured code.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;potential-drawbacks-of-using-snippets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Potential Drawbacks of Using Snippets&lt;/h3&gt;
&lt;p align=&#34;justify&#34;&gt;
While snippets offer numerous advantages, there are some considerations to keep in mind:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Inflexibility in Complex Scenarios&lt;/strong&gt;: Snippets are excellent for routine tasks, but they may not always suit more complex, unique programming challenges. Overusing snippets in such scenarios can lead to inefficient or convoluted code, especially if the snippet doesn’t align perfectly with the specific requirements of the task.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Maintenance Challenges&lt;/strong&gt;: Snippets, like any other code, require maintenance. As the &lt;code&gt;R&lt;/code&gt; language and associated packages evolve, snippets might become outdated, leading to compatibility issues or deprecated practices. Keeping a library of snippets up-to-date can be a task in itself.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;
&lt;strong&gt;Standardization vs. Creativity&lt;/strong&gt;: While standardization is an advantage, it can sometimes stifle creativity and innovation in coding. Relying heavily on snippets may discourage developers from exploring new or unconventional solutions to programming problems.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;justify&#34;&gt;
Thus, while snippets are a powerful tool in &lt;code&gt;R&lt;/code&gt; programming, understanding and mitigating these potential drawbacks is crucial for effective and efficient use. It’s important to balance the convenience of snippets with the need for deep understanding, creativity, and code efficiency.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;integrating-snippets-into-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Integrating Snippets into &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
Most &lt;code&gt;R&lt;/code&gt; Integrated Development Environments (IDEs), such as RStudio, have built-in support for snippets. They allow for easy creation, modification, and insertion of snippets into your code.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-of-snippets-for-r-programming&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example of Snippets for R Programming&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Function Declaration (&lt;code&gt;advFun&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet advFun
    ${1:function_name} &amp;lt;- function(${2:args}, ${3:optional_args = default_values}) {
        tryCatch({
            ${4:body}
            return(${5:result})
        }, error = function(e) {
            stop(&amp;quot;Error in ${1:function_name}: &amp;quot;, e)
        })
    }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Conditional Execution (&lt;code&gt;three_statements&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet three_statements
    if (${1:primary_condition}) {
        ${2:primary_action}
    } else if (${3:secondary_condition}) {
        ${4:secondary_action}
    } else {
        ${5:alternative_action}
    }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For Loop&lt;/strong&gt; (&lt;code&gt;ForLoop&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet ForLoop
    for (${1:var} in ${2:sequence}) {
        if (${3:break_condition}) {
            break
        } else if (${4:continue_condition}) {
            next
        }
        ${5:loop_body}
    }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;While Loop with Counter&lt;/strong&gt; (&lt;code&gt;whileLoopCounter&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet whileLoopCounter
    ${1:counter} &amp;lt;- ${2:initial_value}
    while (${3:condition}) {
        ${4:body}
        ${1:counter} &amp;lt;- ${1:counter} + 1
        if (${1:counter} &amp;gt; ${5:max_iterations}) break
    }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Join and Transform Data with dplyr&lt;/strong&gt; (&lt;code&gt;dplyrJoinTransform&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet dplyrJoinTransform
    ${1:result} &amp;lt;- ${2:dataset1} %&amp;gt;%
        inner_join(${3:dataset2}, by = &amp;quot;${4:key}&amp;quot;) %&amp;gt;%
        dplyr::mutate(${5:new_column} = ${6:transformation}) %&amp;gt;%
        arrange(${7:order_column})&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Robust Exception Handling&lt;/strong&gt; (&lt;code&gt;robustTryCatch&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet robustTryCatch
    tryCatch({
        ${1:expr}
    }, warning = function(w) {
        warning(&amp;quot;Warning in ${1:expr}: &amp;quot;, w)
    }, error = function(e) {
        stop(&amp;quot;Error in ${1:expr}: &amp;quot;, e)
    }, finally = {
        message(&amp;quot;Executed ${1:expr}&amp;quot;)
    })&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Plotting with ggplot2&lt;/strong&gt; (&lt;code&gt;ggplot_wrap&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet ggplot_wrap
    ggplot(${1:data}, aes(${2:aes_params})) +
        ${3:geom_layer} +
        facet_wrap(~ ${4:facet_var}) +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
        labs(title = &amp;quot;${5:plot_title}&amp;quot;, x = &amp;quot;${6:x_label}&amp;quot;, y = &amp;quot;${7:y_label}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Reading&lt;/strong&gt; (&lt;code&gt;readData&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet readData
    ${1:dataset} &amp;lt;- read.csv(&amp;quot;${2:file_path}&amp;quot;, header = ${3:TRUE}, na.strings = &amp;quot;${4:NA}&amp;quot;, stringsAsFactors = ${5:FALSE})&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;justify&#34;&gt;
These snippets are formatted to be directly added to your &lt;code&gt;R&lt;/code&gt; snippet library, making them easily accessible and usable within your &lt;code&gt;R&lt;/code&gt; programming environment.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluating-code-performance-with-snippet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluating Code Performance with Snippet&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
In addition to the various functional and structural snippets, a key aspect of efficient programming is performance optimization. The &lt;code&gt;measureCodeBottleneck&lt;/code&gt; snippet is an example of code for identifying performance bottlenecks in your &lt;code&gt;R&lt;/code&gt; code. It helps you measure both execution time and memory usage, offering insights into how your code can be optimized for better performance.
&lt;/p&gt;
&lt;div id=&#34;the-measurecodebottleneck-snippet&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The &lt;code&gt;measureCodeBottleneck&lt;/code&gt; Snippet&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet measureCodeBottleneck
    library(microbenchmark)
    library(pryr)

    # Memory and Time Measurement Function
    measureBottleneck &amp;lt;- function(expr) {
        # Measure execution time
        time_result &amp;lt;- microbenchmark(expr, times = ${1:100})
        print(summary(time_result))

        # Measure memory usage
        mem_usage &amp;lt;- object_size(expr)
        print(paste(&amp;quot;Memory Usage: &amp;quot;, mem_usage))
    }

    # Example Usage
    # measureBottleneck({
    #    # Place your code here
    # })&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;justify&#34;&gt;
This snippet is particularly useful when working with large datasets or complex algorithms, where understanding and minimizing resource consumption is crucial.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
Snippets stand as a powerful asset in the toolkit of any &lt;code&gt;R&lt;/code&gt; programmer, driving efficiency, reducing errors, and ensuring consistency across coding projects. Their integration into your daily workflow can be a game changer, significantly elevating both productivity and the quality of your code. However, it’s crucial to use snippets judiciously.
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
While snippets are designed to save time and resources, their indiscriminate or inappropriate use can, paradoxically, lead to the opposite - a waste of time and a drain on resources. As you incorporate these snippets into your work, be mindful of their relevance and applicability to the task at hand. Choose and customize snippets that align closely with your specific coding needs and avoid the temptation to use a snippet when a more straightforward or tailored piece of code would be more efficient. This balanced approach to using snippets will ensure that you truly harness their potential to make your &lt;code&gt;R&lt;/code&gt; programming more effective and streamlined.
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
Remember, the goal is not just to code faster, but to code smarter. Snippets, when used thoughtfully, are a robust lever in achieving this goal.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;citation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Citation&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
&lt;p&gt;Oliveira T.P. (2024, Jan. 06). R Programming with Efficient Snippets&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;@misc{oliveira2024snippets,
  author = {Oliveira, Thiago},
  title = {R Programming with Efficient Snippets},
  url = {https://prof-thiagooliveira.netlify.app/post/r-programming-with-efficient-snippets/},
  year = {2024}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Navigating the Shiny Universe with Golem</title>
      <link>https://prof-thiagooliveira.netlify.com/post/golem-package/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/post/golem-package/</guid>
      <description>


&lt;div id=&#34;the-golem-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The &lt;code&gt;golem&lt;/code&gt; package&lt;/h1&gt;
&lt;p align=&#34;justify&#34;&gt;
In the world of &lt;code&gt;R&lt;/code&gt; programming, Shiny applications let us make interactive web apps using R code. The &lt;code&gt;golem&lt;/code&gt; package (Fay et al. 2021) makes it easier to develop these apps. It brings new tools and methods to this area, helping developers handle complex tasks more simply.
&lt;/p&gt;
&lt;div id=&#34;making-things-with-structure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making Things with Structure&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
Think of making a sculpture out of clay. At first, the big lump of clay can be hard to handle. &lt;code&gt;golem&lt;/code&gt; helps developers, like sculptors, by giving them a clear framework. This means instead of dealing with a big, confusing bunch of code, developers have an organized way to work. It is like having lines drawn on the clay, showing where to shape and smooth it.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modular-component&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modular Component&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
When I first stumbled upon the &lt;code&gt;golem&lt;/code&gt; package for R’s Shiny applications, it was like discovering a secret garden in the world of coding. The stand-out feature for me? Its emphasis on modular coding. Let me break down why this is such a big deal.
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
Think of building a Shiny app like crafting a beautiful mosaic. Each piece (or module) is unique and serves a specific purpose. When you put them all together, they create a stunning picture - your final application. This modular approach is not just about aesthetics; it is about making your coding life a whole lot easier.
&lt;/p&gt;
&lt;div id=&#34;why-modules-make-all-the-difference&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why Modules Make All the Difference&lt;/h3&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt;: Breaking down the app into modules is like having a well-organized toolbox. Everything has its place, and you know exactly where to find it. It is incredibly satisfying and efficient.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Teamwork Made Simple&lt;/strong&gt;: If you are working in a team, modules are a lifesaver. Imagine each team member painting their part of a large canvas. With modules, you can work independently on different features without stepping on each other’s toes.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;: We have all been there - something is broken, and we have no idea where to start looking. With modular coding, it is like having a map with a big “X” marking the spot of the problem. A big simplication!&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Reuse and Recycle&lt;/strong&gt;: I love this part. Created a nifty user authentication module? You can plug it into your next project without reinventing the wheel. It is like having a secret recipe you can use over and over with minor adaptations when needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Growth Made Easy&lt;/strong&gt;: As your app grows, you can just add new modules. It is like adding new rooms to a house. This scalability is one of most helpful feature for any developer.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: Testing each module separately means you can be super confident that every part of your app works perfectly before you put it all together.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Newbie-Friendly&lt;/strong&gt;: If someone new joins your project, it is much easier for them to get up to speed with a modular structure. It is like giving them a well-detailed map instead of a single, overwhelming blueprint.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-developers-toolbox&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Developer’s Toolbox&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;code&gt;golem&lt;/code&gt; is not just about keeping things tidy. It is like a multi-tool for Shiny developers. It helps with JavaScript and CSS, makes app settings simpler, and improves how you work. &lt;code&gt;golem&lt;/code&gt; also manages updates in &lt;code&gt;R&lt;/code&gt;, making sure your app stays stable even when other parts of &lt;code&gt;R&lt;/code&gt; change.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deployment-and-documentation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deployment and Documentation&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
Deploying a Shiny app should feel like a victory lap, not a hurdle race. &lt;code&gt;golem&lt;/code&gt; ensures this by packaging Shiny apps in a deployment-ready format. Be it RStudio Connect, Shinyapps.io, or the containerized world of Docker, your app is prepared and primed to go live.
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
Now, let’s talk about something that does not always get the spotlight but is super crucial: documentation. &lt;code&gt;golem&lt;/code&gt; knows how important this is. It is not just about coding; it is about leaving a trail of breadcrumbs for those who will follow in your footsteps. &lt;code&gt;golem&lt;/code&gt; encourages you to document your work thoroughly. Think of it as creating a treasure map for future developers and collaborators who will join your project. Moreover, &lt;code&gt;golem&lt;/code&gt; aligns seamlessly with the &lt;code&gt;roxygen2&lt;/code&gt; style of documentation, familiar to many R developers. This integration means that while you are crafting your Shiny app, you can simultaneously create comprehensive, easy-to-understand documentation. It is like having a dual toolkit - one for building your app and another for creating a clear, helpful guide for any future developer or user who ventures into your code. This approach not only saves time but also ensures that your documentation is as robust and user-friendly as the app you are building.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;
&lt;code&gt;golem&lt;/code&gt; truly revolutionizes the way we handle R and Shiny applications. It is like having a GPS for the often complex journey of app development, guiding you with a structured, modular approach. This not only simplifies the process but also injects a sense of fun and creativity, much like piecing together a Lego masterpiece.
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
Beyond just coding, &lt;code&gt;golem&lt;/code&gt; makes deploying apps feel like a victory lap and turns documentation into an integral, rewarding part of the development cycle. With the added bonus of a supportive community, &lt;code&gt;golem&lt;/code&gt; is more than just a tool - it is a companion for any developer venturing into the exciting world of Shiny applications. 🚀🌟
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;Fay, Colin, Vincent Guyader, Sébastien Rochette, and Cervan Girard. 2021. Golem: A Framework for Robust Shiny Applications. &lt;a href=&#34;https://github.com/ThinkR-open/golem&#34; class=&#34;uri&#34;&gt;https://github.com/ThinkR-open/golem&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-material&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Additional Material&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering-shiny.org/golem.html&#34;&gt;Engineering Production-Grade Shiny Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/cheatsheets/golem.pdf&#34;&gt;golem: A Framework for Building Robust Shiny Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/golem/index.html&#34;&gt;golem R package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;citation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Citation&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
&lt;p&gt;Oliveira T.P. (2023, Oct. 02). Navigating the Shiny Universe with Golem&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;@misc{oliveira2020golem,
  author = {Oliveira, Thiago},
  title = {Navigating the Shiny Universe with Golem},
  url = {https://prof-thiagooliveira.netlify.app/post/golem-package/},
  year = {2023}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Comparison of Markerless and Marker-based Motion Capture Systems using 95% Functional Limits of Agreement in a Linear Mixed-Effects Modelling Framework</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2023-floa/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2023-floa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Hierarchical Approach for Evaluating Athlete Performance with an Application in Elite Basketball</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2023-onscore/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2023-onscore/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Pedigree-based Animal Models Using Directed Acyclic Graphs</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2023-dag/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2023-dag/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A method for partitioning trends in genetic mean and variance to understand breeding practices</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2022-alphapartvariance/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2022-alphapartvariance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Developing best practices for genotyping-by-sequencing analysis using linkage maps as benchmarks</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2022-genotyping-by-sequencing/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2022-genotyping-by-sequencing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quantifying the Drivers of Genetic Change in Plant Breeding</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/quantifying-the-drivers-of-genetic-change-in-plant-breeding/</link>
      <pubDate>Wed, 21 Sep 2022 19:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/quantifying-the-drivers-of-genetic-change-in-plant-breeding/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A method for partitioning trends in genetic mean and variance to understand breeding practices</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/a-method-for-partitioning-trends-in-genetic-mean-and-variance-to-understand-breeding-practices/</link>
      <pubDate>Wed, 27 Jul 2022 19:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/a-method-for-partitioning-trends-in-genetic-mean-and-variance-to-understand-breeding-practices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Temporal and genomic analysis of additive genetic variance in breeding programmes</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2021-llara_gen_var_plants/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2021-llara_gen_var_plants/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Visualization and Data Structure</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/visualization-and-data-structure/</link>
      <pubDate>Mon, 20 Sep 2021 11:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/visualization-and-data-structure/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Modelling menstrual cycle length in athletes using state-space models</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2020-scireports/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2020-scireports/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Partition/Decomposition of Breeding Values by Paths of Information</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2021-alphapart-package/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2021-alphapart-package/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Global Short-Term Forecasting of Covid-19 Cases</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2020-covid/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2020-covid/</guid>
      <description>&lt;p&gt;Supplementary notes were added here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Prof-ThiagoOliveira/covid_forecast&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://prof-thiagooliveira.shinyapps.io/COVIDForecast/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dashboard App&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Expressions in C&#43;&#43;</title>
      <link>https://prof-thiagooliveira.netlify.com/post/expressions/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/post/expressions/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Expressions in C++ are fundamental constructs made up of operators, constants, and variables, following the language&amp;rsquo;s syntactical rules. Every expression is a segment of a code that returns a value. For instance:&lt;/p&gt;
&lt;img src=&#34;exp1.png&#34; width=&#34;320px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;This example demonstrates the creation of variables to store values: a box for $x$ and another for $y$, where $y$ equals the expression $x + 13$ (thus, $y = 23$). Now, let&amp;rsquo;s delve into a more complex example:&lt;/p&gt;
&lt;img src=&#34;exp2.png&#34; width=&#34;500px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;This statement encompasses three expressions:&lt;/p&gt;
&lt;div class=&#34;div-1&#34;&gt;
* The results of the expression $3 - x$ is stored in the variable $y$
* The expression $y = 3 - x$ returns the value of $y$, and it is stored in the variable $v$
* The results of the expression $y \times \left(\frac{v}{5} + x\right)$ is stored in the variable $z$
&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s essential to remember the precedence of operations: multiplication and division are executed before addition and subtraction. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1-3*4 = -11
2/3-4*2/3 = -2
2/3-4/4*2/3 = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Operator precedence&lt;/strong&gt; in &lt;code&gt;C++&lt;/code&gt; determines the sequence of operations in an expression. Operators have a specific order of execution relative to others. For instance, in the expression $\frac{2}{4} - 3 + 4 \times 6$, the subexpressions $\frac{2}{4}$&lt;code&gt;and&lt;/code&gt;$4 \times 6$ are calculated first, followed by the addition and subtraction. When operators have the same precedence, their associativity dictates the order - either left-to-right or right-to-left.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;exp3.png&#34; alt=&#34;Precedence order&#34; width=&#34;300px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Precedence order&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Associativity&lt;/strong&gt; specifies the order of operations for operators with the same precedence level. It can be left-to-right or right-to-left. Typically, addition, subtraction, multiplication, and division are left-associative, while assignment operators are right-associative. Some operators are non-associative, meaning their behaviour is undefined if used sequentially in an expression. Parentheses can alter the default associativity, enforcing a specific order.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;exp4.png&#34; alt=&#34;Example of left-associative, right-associative, and non-associative&#34; width=&#34;800px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Example of left-associative, right-associative, and non-associative&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;using-parentheses-&#34;&gt;Using Parentheses &lt;code&gt;()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The operator &lt;code&gt;()&lt;/code&gt; has the highest precedente order (see &lt;a href=&#34;#table1&#34;&gt;Table 1&lt;/a&gt;), as consequence, we can use parentheses to change the sequence of operators. 
Consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5 + 6 * 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; operator is evaluated firstly, followed by the &lt;code&gt;+&lt;/code&gt; operator, so the result is $5+6\times 7 = 47$. However, if we want to account for the addiction first and then the multiplication, we can rewrite the code as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(5 + 6) * 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, the program will compute $\left(5+6\right)\times 7=11\times 7=77$. Sometimes, parentheses&#39; inclusion should be important to make your code easier to understand, and therefore easier to maintain.&lt;/p&gt;
&lt;h1 id=&#34;modulus-operator-&#34;&gt;Modulus operator (%)&lt;/h1&gt;
&lt;p&gt;The modulus operator evaluates the remainder when dividing the first operand by the second one. Ex.: &lt;code&gt;a % b&lt;/code&gt; is the remainder when $a$ is divided&lt;table class=&#34;wikitable&#34;&gt;&lt;/p&gt;
&lt;p&gt;by $b$ ($a$ modulus $b$).&lt;table class=&#34;wikitable&#34;&gt; by $b$ ($a$ modulus $b$).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;exp5.png&#34; alt=&#34;Example of modulus&#34; width=&#34;300px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Example of modulus&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;div-1&#34;&gt;
* Dividing an integer by another one gives an integer.
&lt;/div&gt;
&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;int x = 10;
int y = 3;

x/y = 10/3 = 3 (dividing two integers)

x % y = 1 (modulus)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;short-hand-or-syntatic-sugar&#34;&gt;Short hand or syntatic sugar&lt;/h1&gt;
&lt;p&gt;Short hand expressions provide a straightforward way to write common patterns over the algorithm for initialized variables.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Short hand&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Prefix and Postfix&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$x+=y$&lt;/td&gt;
&lt;td&gt;$x=x+y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x-=y$&lt;/td&gt;
&lt;td&gt;$x=x-y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x*=y$&lt;/td&gt;
&lt;td&gt;$x= x \times y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x/=y$&lt;/td&gt;
&lt;td&gt;$x=x/y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x++$&lt;/td&gt;
&lt;td&gt;$x=x+1$&lt;/td&gt;
&lt;td&gt;Return the value of $x$ first then increment it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$++x$&lt;/td&gt;
&lt;td&gt;$x=x+1$&lt;/td&gt;
&lt;td&gt;Increment first then return the value of $x$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x&amp;ndash;$&lt;/td&gt;
&lt;td&gt;$x=x-1$&lt;/td&gt;
&lt;td&gt;Return the value of $x$ first then increment it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&amp;ndash;x$&lt;/td&gt;
&lt;td&gt;$x=x-1$&lt;/td&gt;
&lt;td&gt;Increment first then return the value of $x$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;example-1&#34;&gt;Example 1:&lt;/h2&gt;
&lt;p&gt;Here you can see that &lt;code&gt;y ++= x * z;&lt;/code&gt; is calculate as $y=y+x \times z = 30 + 2 \times 4 = 38$.&lt;/p&gt;
&lt;img src=&#34;example1.png&#34; width=&#34;350px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h2 id=&#34;example-2&#34;&gt;Example 2:&lt;/h2&gt;
&lt;p&gt;In this example you can see that we used the postfix &lt;code&gt;x++&lt;/code&gt; to first initialize $y$ ($y=8 \times x = 8 \times 7 = 56$) and then update $x$ to &lt;code&gt;x=x+1=8&lt;/code&gt;. On the other hand, we used the prefix &lt;code&gt;--y&lt;/code&gt; to first update the variable $y$ to &lt;code&gt;y=y-1=55&lt;/code&gt; and then calculate the variable z using the updated $y$ $\left(z = y/5 = 55/5 = 11 \right)$.&lt;/p&gt;
&lt;img src=&#34;example2.png&#34; width=&#34;500px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;Note that when we use &lt;code&gt;x*= (y/z) % 2&lt;/code&gt; the variable $x$ multiply the entire expression after &lt;code&gt;=&lt;/code&gt; symbol. This expression is equivalent to &lt;code&gt;x = x * ((y/z) % 2));&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;operator-precedence-and-associativity&#34;&gt;Operator precedence and associativity&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;#table1&#34;&gt;Table 1&lt;/a&gt; shows a list of precedence (ordered) and associativity of C operators. This table was obtained from 
&lt;a href=&#34;https://en.cppreference.com/w/c/language/operator_precedence#cite_note-1&#34;&gt;cppreference.com&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
&lt;table class=&#34;wikitable&#34;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;a name=&#34;table1&#34;&gt; Table 1: Precedence and associativity of C operators &lt;/a&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Precedence
&lt;/th&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Operator
&lt;/th&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Description
&lt;/th&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Associativity
&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;6&#34;&gt; 1
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;++&lt;/code&gt; &lt;code&gt;\-\-&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; Suffix/postfix increment and decrement
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;6&#34;&gt; Left-to-right
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;()&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Function call
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;[]&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Array subscripting
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;.&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Structure and union member access
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Structure and union member access through pointer
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;(&lt;i&gt;type&lt;/i&gt;){&lt;i&gt;list&lt;/i&gt;}&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Compound literal&lt;span class=&#34;t-mark-rev t-since-c99&#34;&gt;(C99)&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;8&#34;&gt; 2
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;++&lt;/code&gt; &lt;code&gt;\-\-&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; Prefix increment and decrement&lt;sup id=&#34;cite_ref-1&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-1&#34;&gt;[note 1]&lt;/a&gt;&lt;/sup&gt;
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;8&#34;&gt; Right-to-left
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Unary plus and minus
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;!&lt;/code&gt; &lt;code&gt;~&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Logical NOT and bitwise NOT
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;(&lt;i&gt;type&lt;/i&gt;)&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Cast
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;*&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Indirection (dereference)
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Address-of
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;sizeof&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Size-of&lt;sup id=&#34;cite_ref-2&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-2&#34;&gt;[note 2]&lt;/a&gt;&lt;/sup&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;_Alignof&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Alignment requirement&lt;span class=&#34;t-mark-rev t-since-c11&#34;&gt;(C11)&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 3
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;%&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Multiplication, division, and remainder
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;11&#34;&gt; Left-to-right
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 4
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Addition and subtraction
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 5
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise left shift and right shift
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;2&#34;&gt; 6
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; For relational operators &amp;lt; and ≤ respectively
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; For relational operators &amp;gt; and ≥ respectively
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 7
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;==&lt;/code&gt; &lt;code&gt;!=&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; For relational = and ≠ respectively
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 8
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise AND
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 9
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;^&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise XOR (exclusive or)
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 10
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;|&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise OR (inclusive or)
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 11
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Logical AND
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 12
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;||&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Logical OR
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 13
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;?:&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Ternary conditional&lt;sup id=&#34;cite_ref-3&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-3&#34;&gt;[note 3]&lt;/a&gt;&lt;/sup&gt;
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;6&#34;&gt; Right-to-Left
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;5&#34;&gt; 14&lt;sup id=&#34;cite_ref-4&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-4&#34;&gt;[note 4]&lt;/a&gt;&lt;/sup&gt;
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; Simple assignment
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;+=&lt;/code&gt; &lt;code&gt;-=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Assignment by sum and difference
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;*=&lt;/code&gt; &lt;code&gt;/=&lt;/code&gt; &lt;code&gt;%=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Assignment by product, quotient, and remainder
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Assignment by bitwise left shift and right shift
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; &lt;code&gt;&amp;amp;=&lt;/code&gt; &lt;code&gt;^=&lt;/code&gt; &lt;code&gt;|=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; Assignment by bitwise AND, XOR, and OR
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 15
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;,&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Comma
&lt;/td&gt;
&lt;td&gt; Left-to-right
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;ol class=&#34;references&#34;&gt;
&lt;li id=&#34;cite_note-1&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-1&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;The operand of prefix &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;\-\-&lt;/code&gt; can&#39;t be a type cast. This rule grammatically forbids some expressions that would be semantically invalid anyway. Some compilers ignore this rule and detect the invalidity semantically.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&#34;cite_note-2&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-2&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;The operand of &lt;code&gt;sizeof&lt;/code&gt; can&#39;t be a type cast: the expression &lt;code&gt;sizeof (int) * p&lt;/code&gt; is unambiguously interpreted as &lt;code&gt;(sizeof(int)) * p&lt;/code&gt;, but not &lt;code&gt;sizeof((int)*p)&lt;/code&gt;.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&#34;cite_note-3&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-3&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;The expression in the middle of the conditional operator (between &lt;code&gt;&lt;b&gt;?&lt;/b&gt;&lt;/code&gt; and &lt;code&gt;&lt;b&gt;:&lt;/b&gt;&lt;/code&gt;) is parsed as if parenthesized: its precedence relative to &lt;code&gt;?:&lt;/code&gt; is ignored.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&#34;cite_note-4&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-4&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;Assignment operators&#39; left operands must be unary (level-2 non-cast) expressions. This rule grammatically forbids some expressions that would be semantically invalid anyway. Many compilers ignore this rule and detect the invalidity semantically. For example, &lt;span class=&#34;t-c&#34;&gt;&lt;span class=&#34;mw-geshi c source-c&#34;&gt;e &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;sy1&#34;&gt;&amp;lt;&lt;/span&gt; d &lt;span class=&#34;sy4&#34;&gt;?&lt;/span&gt; a&lt;span class=&#34;sy2&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;sy4&#34;&gt;:&lt;/span&gt; a &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; d&lt;/span&gt;&lt;/span&gt; is an expression that cannot be parsed because of this rule. However, many compilers ignore this rule and parse it as &lt;span class=&#34;t-c&#34;&gt;&lt;span class=&#34;mw-geshi c source-c&#34;&gt;e &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;sy1&#34;&gt;&amp;lt;&lt;/span&gt; d&lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sy4&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;sy2&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sy4&#34;&gt;:&lt;/span&gt; a&lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; d &lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and then give an error because it is semantically invalid.&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id=&#34;impact-of-data-types-on-expressions&#34;&gt;Impact of Data Types on Expressions&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;C++&lt;/code&gt;, the data type of the variables involved in an expression significantly impacts the result. For instance, dividing two integers results in an integer, while using at least one floating-point number yields a floating-point result. Understanding how data types interact within expressions is crucial for accurate calculations and avoiding common pitfalls like integer truncation.&lt;/p&gt;
&lt;p&gt;Here are some key points about integer truncation and other common pitfalls in C++:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integer Truncation&lt;/strong&gt;: This occurs when the result of a division or other operation between integers is a floating-point number, but the data type is an integer. For example, &lt;code&gt;int result = 5 / 2;&lt;/code&gt; will store &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;result&lt;/code&gt;, not &lt;code&gt;2.5&lt;/code&gt;, as the fractional part is truncated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implicit Type Conversions&lt;/strong&gt;: &lt;code&gt;C++&lt;/code&gt; automatically converts types in certain situations, which can lead to unexpected results. For instance, mixing signed and unsigned integers in expressions can cause unexpected behaviours due to implicit type conversions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Overflow and Underflow&lt;/strong&gt;: This happens when a variable is assigned a value outside its range. For example, storing a value larger than the maximum value that an &lt;code&gt;int&lt;/code&gt; can hold will result in overflow, leading to unexpected values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Precision Loss in Floating-Point Numbers&lt;/strong&gt;: Floating-point variables can lose precision, especially when dealing with very large or very small numbers. This can result in rounding errors in calculations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Division by Zero&lt;/strong&gt;: This can occur if a program inadvertently divides a number by zero. It&amp;rsquo;s a critical error in &lt;code&gt;C++&lt;/code&gt; and can cause a program to crash or behave unpredictably.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Uninitialized Variables&lt;/strong&gt;: Using variables before initializing them can lead to unpredictable results, as they may contain random data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pointer Errors&lt;/strong&gt;: Common mistakes with pointers include dereferencing a null or uninitialized pointer, pointer arithmetic errors, and memory leaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operator Precedence Mistakes&lt;/strong&gt;: Misunderstanding the order in which operations are performed can lead to bugs. For example, assuming that &lt;code&gt;a + b * c&lt;/code&gt; adds &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; before multiplying by &lt;code&gt;c&lt;/code&gt; (it doesn&amp;rsquo;t; multiplication is done first).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assuming Size of Data Types is Constant&lt;/strong&gt;: The size of data types like &lt;code&gt;int&lt;/code&gt; can vary depending on the system. Assuming a constant size can lead to errors, particularly when performing operations like bit manipulation or working with binary file formats.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Not Checking the Return Value of Functions&lt;/strong&gt;: When functions return values to indicate success or failure, not checking these can lead to the program continuing as if nothing went wrong, even when errors have occurred.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;role-of-type-casting-in-expressions&#34;&gt;Role of Type Casting in Expressions&lt;/h2&gt;
&lt;p&gt;Type casting in expressions can be used to explicitly convert data from one type to another. This technique is particularly useful in situations where operations between different data types are necessary. For example, casting an integer to a float in a division operation to obtain a floating-point result. However, it&amp;rsquo;s important to use type casting judiciously to maintain the precision and integrity of data.&lt;/p&gt;
&lt;h2 id=&#34;the-significance-of-expression-evaluation-order&#34;&gt;The Significance of Expression Evaluation Order&lt;/h2&gt;
&lt;p&gt;While operator precedence and associativity rules dictate the order of operations in an expression, the sequence in which expressions are evaluated can also be influenced by function calls, side effects, and sequence points. Understanding how &lt;code&gt;C++&lt;/code&gt; evaluates expressions, especially in complex statements, is essential for debugging and writing predictable code.&lt;/p&gt;
&lt;h2 id=&#34;compiler-optimizations-and-expressions&#34;&gt;Compiler Optimizations and Expressions&lt;/h2&gt;
&lt;p&gt;Modern &lt;code&gt;C++&lt;/code&gt; compilers often optimize expressions to enhance performance. These optimizations might include reordering operations (while respecting the language rules), eliminating redundant calculations, or simplifying expressions at compile time. Being aware of these potential optimizations can help in writing more efficient code and understanding any discrepancies between the written code and its execution behaviour.&lt;/p&gt;
&lt;h2 id=&#34;best-practices-for-writing-expressions&#34;&gt;Best Practices for Writing Expressions&lt;/h2&gt;
&lt;p&gt;To maintain readability and reduce errors in &lt;code&gt;C++&lt;/code&gt;, it&amp;rsquo;s advisable to write clear and simple expressions. Avoid overly complex expressions, use parentheses to clarify order of operations, and follow coding standards and guidelines. Readable expressions are easier to debug, maintain, and understand, especially in collaborative environments.&lt;/p&gt;
&lt;p&gt;Adding these paragraphs can provide a more comprehensive and nuanced understanding of expressions in &lt;code&gt;C++&lt;/code&gt;, catering to both beginners and experienced programmers.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;C Operator Precedence - &lt;a href=&#34;https://en.cppreference.com/w/c/language/operator_precedence#cite_note-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.cppreference.com/w/c/language/operator_precedence#cite_note-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;citation&#34;&gt;Citation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
Oliveira T.P. (2020, Dec. 16). Expressions in C++
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;@misc{oliveira2020expression,
  author = {Oliveira, Thiago},
  title = {Expressions in C++},
  url = {https://prof-thiagooliveira.netlify.app/post/expressions/},
  year = {2020}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How hard is it to predict COVID-19 cases?</title>
      <link>https://prof-thiagooliveira.netlify.com/post/how-hard-is-it-to-predict-covid-19-cases/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/post/how-hard-is-it-to-predict-covid-19-cases/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Many different variables affect how the pandemic progresses and it is extremely difficult to identify each one, and precisely measure them.&lt;/li&gt;
&lt;li&gt;The data we have is surely innacurate, but could be a good proxy for understanding the behaviour of the coronavirus outbreak&lt;/li&gt;
&lt;li&gt;We developed a statistical model to obtain short-term forecasts of the number of COVID-19 cases&lt;/li&gt;
&lt;li&gt;We constantly update forecasts and make all results freely available to any country in the world through a web &lt;a href=&#34;link&#34;&gt;app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;how-many-people-will-get-infected-tomorrow&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How many people will get infected tomorrow?&lt;/h1&gt;
&lt;p&gt;“How many cases do you think we’re going to have today?”, my fiancèe asked me just as I’m writing this post – and quite frankly I’ve asked that myself many times over the last several months. Wouldn’t it be great if we had a method to accurately predict the number of confirmed COVID-19 cases we’ll have every single day for, say, the next month? If we could do that, we’d know whether our measures to contain the virus are working, whether we would be able to lift particular restrictions here and there, invest in intensive care units, or whether that wedding we had planned long ago would finally happen or have to be postponed… again.&lt;/p&gt;
&lt;p&gt;It is very hard, however, to pinpoint exactly every single factor that affects the number of reported COVID-19 cases, and most importantly, measure them all. Here we try and outline different techniques we could use to try and predict how the outbreak will behave in the future, and show a particular method we have developed to obtain short-term forecasts with a reasonable degree of accuracy. We have packaged the method into an app, which you can access &lt;a href=&#34;link&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-strategies-can-we-use&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What strategies can we use?&lt;/h1&gt;
&lt;p&gt;There are many different strategies and mathematical/statistical tools we can use to attempt to predict the future. These can include what we call mechanistic, or compartment models, for example. These make assumptions based on empirical evidence of the biological system being studied and translate them into mathematical equations based on the flow of individuals to/from specific compartments. For COVID-19 the SEIR-type model has been widely used by many research groups to describe the behaviour of the outbreak (see our &lt;a href=&#34;https://www.hamilton.ie/covid19/posts/2020-09-11-how-long-will-covid-19-last-in-ireland/&#34;&gt;blog post&lt;/a&gt; on the use of SEIR models to predict when the pandemic will end). They are realistic in the sense that they reflect the epidemiological behaviour of the outbreak.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;SEIR.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are other alternatives that do not take into account the true biological nature of the phenomenon per se, but may use it as input in a different way. Many &lt;a href=&#34;https://en.wikipedia.org/wiki/Machine_learning&#34;&gt;machine learning&lt;/a&gt; techniques could sometimes be seen as black-box methods, that would e.g. take the reported number of past COVID-19 cases and other variables that we would believe could influence this number and spit out a prediction for tomorrow, or next week, next month, etc. There are cases where these methods are even more accurate than mechanistic models, however there is a trade-off to consider here in terms of prediction accuracy vs. explainability, as &lt;a href=&#34;https://royalsocietypublishing.org/doi/10.1098/rsbl.2017.0660&#34;&gt;discussed here&lt;/a&gt;. If a new event or variable comes into play, which could empirically be very important to dictate the future behaviour of the pandemic, it is very difficult to gauge its effects using a black-box method.&lt;/p&gt;
&lt;p&gt;We could also simply assume that the number of reported COVID-19 cases today is purely a reflection of the reported number of cases yesterday, and the day before, and so on. So we pretty much assume all variables that influence this process can be summarised purely by the outcomes we have observed in the past, and this can in turn be used to forecast what future numbers will be. Of course, there are plenty of different ways to include other variables in these types of models, but the important thing is to notice that we place a very heavy assumption on an underlying process that is able to explain its own behaviour. We usually refer to these models as &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series&#34;&gt;“time series”&lt;/a&gt; or “state-space” models.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-is-it-so-difficult&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Why is it so difficult?&lt;/h1&gt;
&lt;p&gt;There are many factors that influence our ability to predict the number of future COVID-19 cases. Imagine we have, for example, a fantastic SEIR-type model that can reproduce the dynamics of the disease almost perfectly up to today. To be able to predict with great accuracy what will happen tomorrow (or even further down the line), we must assume, among other things, that the assumptions that hold today will still hold tomorrow and so on. If any new variable comes into play, or if the variables that are involved change over time, our predictions can be completely off.&lt;/p&gt;
&lt;p&gt;This is not the worst problem, however. There are in fact many variables that we’re simply not able to measure with good precision. This includes knowing, for example, where everybody in the country is at all times, who they talk to, for how long, where they will be, etc. This is why it is important to do &lt;a href=&#34;https://www2.hse.ie/conditions/coronavirus/close-contact-and-casual-contact.html&#34;&gt;contact tracing&lt;/a&gt;, although this matters mostly in a retrospective way, not necessarily to predict what will happen in the future.&lt;/p&gt;
&lt;p&gt;But wait a minute now, we don’t even know whether the data we can actually measure is in fact accurate! Or to be more specific, we do know that our data is definitely &lt;em&gt;not&lt;/em&gt; 100% accurate. Cases reported today could reflect infections that happened between a few days ago to several weeks. Tests are not 100% accurate either, so there is a pool of false positives in there, as well as false negatives not being included in the whole sum. Simply put, the data we have is pretty much a proxy of the real thing. Hence why it is so important to understand what these numbers could actually mean, and not &lt;a href=&#34;https://www.newscientist.com/article/mg24732954-000-david-spiegelhalter-how-to-be-a-coronavirus-statistics-sleuth/&#34;&gt;imbue them with improper meaning&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-about-short-term-forecasting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What about short-term forecasting?&lt;/h1&gt;
&lt;p&gt;So long-term forecasting is very prone to built-up variation and error, as we all know. It’s just like predicting what time you’ll wake up on your birthday 10 years from now. But there must be something we could do in the short-term, right? Well, it depends on how “long” this short-term is. And it also depends on how we want to use this information.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2006.00111&#34;&gt;We developed a modelling framework&lt;/a&gt; in an attempt to predict the number of reported COVID-19 cases for up to 7 days in the future. We fitted our models to the data collected by the &lt;a href=&#34;https://www.ecdc.europa.eu/en&#34;&gt;ECDC&lt;/a&gt; to generate the forecasts. See below for a validation study we carried out back in May/2020.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;forecast.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The panels are in the logarithmic scale, but in essence, the closer the points are to the identity line (dashed line), the closer our model was in predicting the number of COVID-19 cases up to 7 days ahead (panels in part &lt;em&gt;A&lt;/em&gt;). In part &lt;em&gt;B&lt;/em&gt; we see that the accuracy of the method is high for all 7 days ahead, but we begin to lose in terms of precision from day four onwards. (&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; represents &lt;a href=&#34;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&#34;&gt;Pearson’s linear correlation coefficient&lt;/a&gt;, the closest it is to 1 the better the method is; the same applies to the CCC - the &lt;a href=&#34;https://en.wikipedia.org/wiki/Concordance_correlation_coefficient&#34;&gt;concordance correlation coefficient&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The idea behind this is not to be able to inform governments the exact numbers we’d expect tomorrow, but to give more perspective in terms of the types of trends we expect in the near future. This is useful to inform decision making related to the healthcare services. For instance, if a particular country’s healthcare system is currently at capacity, and we are predicting an upward trend in the number of infections, then this could guide policy in terms of resource allocation to accommodate the extra patients that are likely to seek health professionals in the upcoming weeks. This is why it is so important to look at overall trends (for example, the number of cases per 100,000 people over the last 14 days).&lt;/p&gt;
&lt;p&gt;Our model creates predictions based on two components. The first, called the autoregressive component, uses information on the past number of cases to predict future ones. The second is included to account for extra variability that could occur for a variety of different reasons. The autoregressive component is directly linked to the behaviour of the outbreak, so it is useful to detect waves of the pandemic. See, for example, our latest estimates for Ireland:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Ireland.png&#34; width=&#34;500px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can clearly see that towards the end of July this second wave was already starting to take shape, and now we are aiming at a new peak of cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;grouping-countries-together&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Grouping countries together&lt;/h1&gt;
&lt;p&gt;Now that we have profiles for each country on how the pandemic is behaving in terms of number of cases, perhaps it would be a good idea to look at which countries present a similar behaviour over the last, say, 60 days. We created a dendrogram based on a cluster analysis performed using the values of the autoregressive parameter and produced the figure below –&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dendrogram.png&#34; width=&#34;1000px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we see that over looking at the past two months, the country that has presented the most similar behaviour to Ireland was Croatia. In our &lt;a href=&#34;link&#34;&gt;app&lt;/a&gt; you can play with different ways of presenting the dendrogram, as well as print names of different countries in bold to aid in finding them easily when looking at the picture. You can also change the number of clusters.&lt;/p&gt;
&lt;p&gt;Perhaps these comparisons would be useful in terms of comparing government policies on how to deal with the COVID-19 outbreak, and learn lessons from successful policies vs unsuccessful ones. Also, this type of modelling can help to detect a further wave of the outbreak sooner rather than when we are already in the middle of it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;all-models-are-wrong&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;All models are wrong…&lt;/h1&gt;
&lt;p&gt;In the end of the day, there is no true, correct model we can apply. After all, it is impossible to know exactly what the data generating mechanism is. We can only attempt to understand it and reproduce its behaviour using mathematical/statistical tools. We hope, however, that our modelling approach can be useful. We could point a whole list of problems with it here, such as completely ignoring biological mechanisms and using just past behaviour to explain future behaviour without any additional context. But we believe it represents a reasonable attempt at forecasting the number of COVID-19 cases in the short-term.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;citation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Citation&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
&lt;p&gt;Moral, et al. (2020, Sept. 29). Ireland’s COVID-19 Data Dive: How hard is it to predict COVID-19 cases?. Retrieved from &lt;a href=&#34;https://www.hamilton.ie/covid19/posts/2020-10-01-how-hard-to-predict-cases/&#34; class=&#34;uri&#34;&gt;https://www.hamilton.ie/covid19/posts/2020-10-01-how-hard-to-predict-cases/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;@misc{moral2020how,
  author = {Moral, Rafael and Oliveira, Thiago and Parnell, Andrew},
  title = {Ireland&amp;#39;s COVID-19 Data Dive: How hard is it to predict COVID-19 cases?},
  url = {https://www.hamilton.ie/covid19/posts/2020-10-01-how-hard-to-predict-cases/},
  year = {2020}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Signed and Unsigned Binary Numbers</title>
      <link>https://prof-thiagooliveira.netlify.com/post/signed-and-unsigned-binary-numbers/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/post/signed-and-unsigned-binary-numbers/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When we think about writing a program in C, the first step is understand how variables should be assigned. There are several variable&amp;rsquo;s type in C, and here we are introducing the type &lt;code&gt;int&lt;/code&gt;, which is used for integer data types. Basically, we can define a variable as an integer in two ways:&lt;/p&gt;
&lt;div class=&#34;div-1&#34;&gt;
* Uninitialized variable: defined as `int x;`, where no value is assign to the variable $x$ (Figure 1), which generally is not a good idea as it could lead to a bug in the algorithm if no value is assign over the code. 
* Initialized variable: there are two ways to assign a value to a variable $x$ (Figure 1):
  &lt;div class = &#34;div-2&#34;&gt;
    * in a single declaration -  `int x = 3;`
    * in a double step declaration - `int x;` and `x = 3;`
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;var_and_exp.png&#34; alt=&#34;Declaring variables in C&#34; width=&#34;550px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Declaring variables in C&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, there are a large set of storage size-specific declarations for a integer, and here we will explain just an initial idea about it. Figure 2 showns the Integer representation of whole numbers or fixed-point numbers (fixed number of digits). Generally, computers use a fixed number of bits to represent them, where commonly used bit-lengths for integers are 8-bit, 16-bit (&lt;code&gt;short&lt;/code&gt;), 32-bit (&lt;code&gt;long&lt;/code&gt;) or 64-bit (&lt;code&gt;long long&lt;/code&gt;). There are two representation schemes for integers called signed integer type (&lt;code&gt;signed int&lt;/code&gt;) capable of containing the range of values from -32,767 to 32,767, and unsigned integer type (&lt;code&gt;unsigned int&lt;/code&gt;) containing the range of values from 0 to 65,535 ($32767 \times 2+1$). Therefore, &lt;code&gt;unsigned&lt;/code&gt; qualifier should be used when we are working with only positive values.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;binary_number.png&#34; alt=&#34;Integer Representation&#34; width=&#34;500px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Integer Representation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Furthermore, there are three representation schemes for signed integers called &lt;em&gt;Sign-Magnitude representation&lt;/em&gt;, &lt;em&gt;1&amp;rsquo;s Complement representation&lt;/em&gt;, and &lt;em&gt;2&amp;rsquo;s Complement representation&lt;/em&gt;. The 1’s and the 2’s complements of a binary number are important because they permit different representation for negative numbers. In all of these schemes, positive signed binary numbers starts with value 0 while negative ones starts with value 1 (Figure 3).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;sign_bit.png&#34; alt=&#34;Signed binary numbers&#34; width=&#34;300px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Signed binary numbers&lt;/p&gt;
&lt;/div&gt;
Consequently, the disadvantage of signed binary numbers is that there is 1 bit used to store the sign positive or negative while the remaning $n-1$ bits are assign to the range of digits from $-2^{n-1}$ to $2^{n-1}$. If we have 8 bits to represent a signed binary number, we have to use 1 bit for the **sign bit** and 7 bits for the **magnitude bits**:
&lt;div class=&#34;div-1&#34;&gt;
* Using Sign-Magnitude Representation:
$$-|2^{\left(8-1\right)}-1| \mbox{ to } 2^{\left(8-1\right)}-1 = -127 \mbox{ to } 127$$
* Using 2&#39;s Complement Representation:
$$-2^{\left(8-1\right)} \mbox{ to } 2^{\left(8-1\right)}-1 = -128 \mbox{ to } 127$$
&lt;/div&gt;
Thus, we can representing the numbers ranging from -128 to 127 using 2&#39;s Complement Representation. Probably now you are asking why there is one extra number being accounted when using 2&#39;s Complement Representation. The answer can be found in the Figure 4.
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;repre_scheme.png&#34; alt=&#34;Representation schemes of Sign-Magnitude Representation and 2&#39;s Complement Representation&#34; width=&#34;400px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Representation schemes of Sign-Magnitude Representation and 2&#39;s Complement Representation&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;
&lt;h2 id=&#34;unsigned-int&#34;&gt;Unsigned int&lt;/h2&gt;
&lt;p&gt;Supose we are interested in representing a sequence of number $x$ where $x \in \lbrace 0, 1, \ldots, 15\rbrace$. We can assign these numbers as unsigned numbers of 4 bits. Consequently, we have &lt;strong&gt;4 zero&lt;/strong&gt; bits associated to describe this numbers because our variable belongs to the interval $[0, 2^{4}−1] \in \mathcal{N}_{0}$.&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;Representation of numbers from 0 to 15 in 4 bits&lt;/caption&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; bits &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0111 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; x &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 8 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 9 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 10 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 11 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 12 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 13 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 14 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 15 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;signed-int&#34;&gt;Signed int&lt;/h2&gt;
&lt;p&gt;Supose now we are interested in representing a sequence of number $y$ where $y \in \lbrace -7, -6, \ldots,6, 7\rbrace$. We have to assign them as signed numbers using 4 bits because 1 bit will be used for &lt;strong&gt;sign bit&lt;/strong&gt; and 3 bits for the &lt;strong&gt;magnitude bits&lt;/strong&gt; to describe $y \in \left[-|2^3-1|,2^3-1\right] \in \mathcal{Z}$.&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;Sign-Magnitude Representation of numbers from -7 to 7 using 4 bits&lt;/caption&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; bits &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0111 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; y &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -7 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;2&#39;s Complement Representation of numbers from -8 to 7 using 4 bits&lt;/caption&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; bits &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1111 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; y &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -8 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 7 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;p&gt;Barnett R.; O&amp;rsquo;Cull L.; Cox, S. Embedded C Programming and the Microship PIC. Delmar Learning, ed. 1, 2004.&lt;/p&gt;
&lt;p&gt;Cadenhead, R.; Liberty, J. Sams Teach Yoirself C++. Pearson Education, ed. 6, 2017.&lt;/p&gt;
&lt;p&gt;C Data Types - &lt;a href=&#34;https://en.wikipedia.org/wiki/C_data_types&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/C_data_types&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The seven steps of a programer</title>
      <link>https://prof-thiagooliveira.netlify.com/post/the-seven-steps-of-a-programer/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/post/the-seven-steps-of-a-programer/</guid>
      <description>


&lt;div id=&#34;overview-of-the-seven-steps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Overview of the Seven Steps&lt;/h1&gt;
&lt;p&gt;The seven steps proposed by Hilton et al. (2019) present an intriguing strategy for initiating a new project involving programming. This approach is concisely summarized in Figure 1. In this discussion, we will elaborate on these steps, drawing upon the work of Hilton et al. (2019).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;seven_steps.png&#34; alt=&#34;The seven steps (modified from Hilton et al. (2019))&#34; width=&#34;500px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: The seven steps (modified from Hilton et al. (2019))
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All steps are then described in the sections below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-1---project-definition-using-simple-examples&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 1 - Project definition using simple examples&lt;/h1&gt;
&lt;p&gt;This step involves dedicating time to conceptualize the project and breaking it down into manageable tasks. Begin by manually sketching a diagram of the project, highlighting key topics, strategies for addressing challenges, and estimating the number of primary algorithms required for completion. This should also encompass the subdivision of the project into smaller tasks, their interconnections, and any sequential order for their execution, as depicted in Figure 2. An effective approach in this stage is crucial as it simplifies the subsequent steps.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-2&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;main_project.png&#34; alt=&#34;Example of how divide the main project into small tasks&#34; width=&#34;500px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Example of how divide the main project into small tasks
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 1&lt;/h2&gt;
&lt;p&gt;Imagine we need to develop a &lt;code&gt;C++&lt;/code&gt; algorithm to calculate the total fat content (&lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;) of a portion of ice cream. Assume this response variable is determined by the amounts of butyric fat (&lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt;) and vegetable fat (&lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;). Let &lt;span class=&#34;math inline&#34;&gt;\(E[y]\)&lt;/span&gt; represent the expected value of &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;, defined as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[E[y]=10-0.5x_1+0.6x_1^2-0.6x_2+0.2x_2^2+0.1x_1x_2\]&lt;/span&gt;
We can manually compute the total fat &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; for specific values of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;. For instance, if &lt;span class=&#34;math inline&#34;&gt;\(x_1=2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2=1\)&lt;/span&gt;, then:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[y=10-0.5\times2+0.6\times 2^2-0.6\times 1+0.2 \times 1^2+0.1\times 2 \times 1 = 11.2.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s assume the secondary goal is to optimize the fat content in the ice cream formulation based on this model. This involves searching for the global minimum on the response surface. Consequently, we can break down our project into two tasks:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Generalize the function for any &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;Calculate the global (or absolute) minimum point;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;If you encounter difficulties in these tasks, it’s often due to a gap in specific domain knowledge, such as a lack of expertise in mathematics:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;How could I calculate the global minimum?&lt;/li&gt;
&lt;li&gt;How can I use partial derivatives?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Therefore, during this step, it is essential to identify all the necessary domain knowledge and address these gaps before proceeding to the next stage. Sometimes, this knowledge may stem from specialized areas such as computer science, sports, agriculture, statistics, or engineering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2---write-everything-you-did&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 2 - Write everything you did&lt;/h1&gt;
&lt;p&gt;In this phase, it is crucial to meticulously record every action undertaken to resolve the project’s challenges or tasks. Ensure that your notes are clear and detailed enough for others to replicate your solutions effortlessly. Be cautious not to overlook steps that might seem obvious, such as basic operations like multiplying &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; by &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;, or the sequence in which tasks are to be executed.&lt;/p&gt;
&lt;div id=&#34;example-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;p&gt;Consider the task of calculating &lt;span class=&#34;math inline&#34;&gt;\(f(x, y) = x^y + 3x\)&lt;/span&gt; for &lt;span class=&#34;math inline&#34;&gt;\(x=2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(y=4\)&lt;/span&gt;. Here’s how you could document the process in a detailed and comprehensible manner:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Multiply 2 by 2 &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 4&lt;/li&gt;
&lt;li&gt;Multiply 4 by 2 &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 8&lt;/li&gt;
&lt;li&gt;Multiply 8 by 2 &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 16&lt;/li&gt;
&lt;li&gt;Sum 16 plus 3 multiplied by 2 &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 22&lt;/li&gt;
&lt;li&gt;22 is the answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;By following these explicit steps, anyone with basic mathematical skills should be able to reach the same result.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3---generalize&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 3 - Generalize&lt;/h1&gt;
&lt;p&gt;The goal now is to transform the specific steps from earlier into a universal algorithm that applies to a broader range of cases, not just specific parameter values. Here are two common methods to achieve this generalization:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Re-examine the details from Step 2, as the key to generalization often lies within its description.&lt;/li&gt;
&lt;li&gt;Identify repetitive patterns, particularly where the same step is executed multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;For instance, let’s generalize our Example 2 by adapting the steps from Step 2, replacing the specific occurrences of 2 with a variable &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Multiply 2 by &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 4&lt;/li&gt;
&lt;li&gt;Multiply 4 by &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 8&lt;/li&gt;
&lt;li&gt;Multiply 8 by &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 16&lt;/li&gt;
&lt;li&gt;Sum 16 plus 3 multiplied by &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; you get 22&lt;/li&gt;
&lt;li&gt;22 is the answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;It is important to note that the initial multiplication should start with &lt;span class=&#34;math inline&#34;&gt;\(x \times x = x^2\)&lt;/span&gt;. Therefore, we multiply &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; by itself &lt;span class=&#34;math inline&#34;&gt;\(y-1\)&lt;/span&gt; times to obtain &lt;span class=&#34;math inline&#34;&gt;\(x^y\)&lt;/span&gt;. This leads us to the following generalized steps for any values of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Algorithm sketch 1
  
start with x = 2 and y = 4
n[1] = x

Count up from i in 1 to y-1 
  n[i+1] = n[i] * x 

z = n[y] + 3 * x
z is  the answer&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;div-3&#34;&gt;
&lt;p&gt;This process is referred to as writing ‘pseudo-code’ as an algorithm design with no particular target language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;step-4---test-your-algorithm&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 4 - Test Your Algorithm&lt;/h1&gt;
&lt;p&gt;Testing your algorithm is a crucial step to ensure the correctness of steps 1-3 before advancing to step 5. Here are some key actions and considerations during this stage:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Test your algorithm with varying parameter values.&lt;/li&gt;
&lt;li&gt;Assess the algorithm’s behavior for positive, negative, or zero values.&lt;/li&gt;
&lt;li&gt;Determine if you have confined the parameter space, e.g., &lt;span class=&#34;math inline&#34;&gt;\(y \geq 0\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Employ mathematical proofs to validate your approach.&lt;/li&gt;
&lt;li&gt;Recognize that there may be more than one correct solution to a programming problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;div-3&#34;&gt;
&lt;p&gt;Remember, the parameter space refers to the range of possible parameter values that define a specific mathematical or statistical model, typically within a subset of the finite-dimensional Euclidean space.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;At times, the generalization in step 3 might be incomplete, leading to a revisit of steps 1-2. This oversight often occurs when not all potential cases are considered or when mathematical proofs are lacking.&lt;/p&gt;
&lt;p&gt;A notable example of an algorithmic error is seen in Example 2. What if &lt;span class=&#34;math inline&#34;&gt;\(y=0\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(y&amp;lt;0\)&lt;/span&gt;? Our algorithm incorrectly addresses these cases. For example, with &lt;span class=&#34;math inline&#34;&gt;\(x=2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(y=0\)&lt;/span&gt;, the algorithm erroneously calculates &lt;span class=&#34;math inline&#34;&gt;\(2^0=2\)&lt;/span&gt; instead of the correct &lt;span class=&#34;math inline&#34;&gt;\(2^0=1\)&lt;/span&gt;. Also, for any &lt;span class=&#34;math inline&#34;&gt;\(y \leq 0\)&lt;/span&gt;, the algorithm erroneously tries to count from &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(y-1 &amp;lt; 0\)&lt;/span&gt;, which is not applicable for natural numbers, leading to an error. Therefore, we must ensure &lt;span class=&#34;math inline&#34;&gt;\(|y| \in \mathcal{N}_{0}\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{N}_{0}\)&lt;/span&gt; represents the set of natural numbers including zero. Consequently, we should aim to generalize our algorithm to accommodate a broader range of cases:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Algorithm Sketch 2 

y must be an integer number.

Start with x = 2 and y = 4.

If y=0 {
  n[1] = 1;
  i=0;
} else {
  Count from i = 1 to |y|-1;
  If y &amp;lt; 0 {
    n[1] = 1/x;
    n[i+1] = n[i] * (1/x);
  } else {
    n[1] = x;
    n[i+1] = n[i] * x;
  }
}

z = n[i+1] + 3 * x;
z is the answer.&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;div-3&#34;&gt;
&lt;p&gt;Question: How can we improve this algorithm? Consider the case where &lt;span class=&#34;math inline&#34;&gt;\(x=y=0\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When encountering problems with our algorithm at this stage, we have two options:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Return to steps 1-3 to gather more information for broadening the algorithm’s applicability.&lt;/li&gt;
&lt;li&gt;Directly fix the algorithm in step 4 when the solution is known.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;example-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 3&lt;/h2&gt;
&lt;p&gt;The data in Figure 4 originates from an algorithm that accepts a single parameter, &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;, belonging to the set &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{N}_{0}\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{N}_{0} = \mathcal{N} \cup \{ 0 \}\)&lt;/span&gt; denotes the set of natural numbers including zero. This algorithm generates a sequence of output values corresponding to each specified value of &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-3&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;example3.png&#34; alt=&#34;Output of sequences of integers based on values of $N$ from 0 to 4&#34; width=&#34;400px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: Output of sequences of integers based on values of &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; from 0 to 4
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;div-3&#34;&gt;
&lt;p&gt;Question: Can you deduce the algorithm that produced the numbers in this figure? Additionally, what would be the result for &lt;span class=&#34;math inline&#34;&gt;\(N=5\)&lt;/span&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;[1] Hilton, AD; Lipp, GM; Rodger, SH, Translation from Problem to Code in Seven Steps, Comped 2019 Proceedings of the Acm Conference on Global Computing Education (2019), pp. 78-84.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;answers&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Answers&lt;/h1&gt;
&lt;div id=&#34;example-3-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 3&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Algorithm Sketch 3

Set N as a non-negative integer (Natural number with zero).

Initialize N with a specific value n.

  Define the sequence parameters:
    Minimum Value = 4 * N
    Maximum Value = 9 * N + 6
    Sequence Increment = 3

  Set x[1] to the Minimum Value.
  
  Iteratively calculate the sequence:
    For each iteration i,
      if x[i-1] &amp;lt; Maximum Value,
        then x[i] = x[i-1] + Sequence Increment.
      else,
        break the loop.

  The sequence x represents the final answer.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r code-input&#34;&gt;&lt;code&gt;# N = 6
N=5
seq &amp;lt;- seq(4*N, 9*N+6, 3)
cat(&amp;quot;The answer is&amp;quot;, seq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The answer is 20 23 26 29 32 35 38 41 44 47 50&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;citation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Citation&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
&lt;p&gt;Oliveira T.P. (2020, Dec. 16). The seven steps of a programer&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;@misc{oliveira2020seven,
  author = {Oliveira, Thiago},
  title = {The seven steps of a programer},
  url = {https://prof-thiagooliveira.netlify.app/post/the-seven-steps-of-a-programer/},
  year = {2020}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Global Short-Term Forecasting of Covid-19 Cases</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/global-short-term-forecasting-of-covid-19-cases/</link>
      <pubDate>Thu, 12 Nov 2020 11:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/global-short-term-forecasting-of-covid-19-cases/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;:&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;The continuously growing number of COVID-19 cases pressures healthcare services worldwide. Accurate short-term forecasting is thus vital to support country-level policy making. The strategies adopted by countries to combat the pandemic vary, generating different uncertainty levels about the actual number of cases. Accounting for the hierarchical structure of the data and accommodating extra-variability is therefore fundamental. We introduce a new modelling framework to describe the course of the pandemic with great accuracy, and provide short-term daily forecasts for every country in the world. We show that our model generates highly accurate forecasts up to six days ahead, and use estimated model components to cluster countries based on recent events. We introduce statistical novelty in terms of modelling the autoregressive parameter as a function of time, increasing predictive power and flexibility to adapt to each country. Our model can also be used to forecast the number of deaths, study the effects of covariates (such as lockdown policies), and generate forecasts for smaller regions within countries. Consequently, it has strong implications for global planning and decision making. We constantly update forecasts and make all results freely available to any country in the world through an online Shiny dashboard.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Settling and feeding behavior of sharpshooter vectors on plum genotypes with different susceptibility levels to leaf scald disease (Xylella fastidiosa)</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2020-plant_pathology/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2020-plant_pathology/</guid>
      <description></description>
    </item>
    
    <item>
      <title>lcc: an R package to estimate the concordance correlation, Pearson correlation, and accuracy over time</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2020-lccpeerj/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2020-lccpeerj/</guid>
      <description>&lt;p&gt;Supplementary notes were added here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lcc package
&lt;ul&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/Prof-ThiagoOliveira/lcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/Prof-ThiagoOliveira/lcc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CRAN: &lt;a href=&#34;https://CRAN.R-project.org/package=lcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://CRAN.R-project.org/package=lcc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Global Short-Term Forecasting of Covid-19 Cases</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/global-short-term-forecasting-of-covid-19-cases/</link>
      <pubDate>Mon, 01 Jun 2020 13:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/global-short-term-forecasting-of-covid-19-cases/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;The continuously growing number of COVID-19 cases pressures healthcare services worldwide. Accurate short-term forecasting is thus vital to support country-level policy making. The strategies adopted by countries to combat the pandemic vary, generating different uncertainty levels about the actual number of cases. Accounting for the hierarchical structure of the data and accommodating extra-variability is therefore fundamental. We introduce a new modelling framework to describe the course of the pandemic with great accuracy, and provide short-term daily forecasts for every country in the world. We show that our model generates highly accurate forecasts up to six days ahead, and use estimated model components to cluster countries based on recent events. We introduce statistical novelty in terms of modelling the autoregressive parameter as a function of time, increasing predictive power and flexibility to adapt to each country. Our model can also be used to forecast the number of deaths, study the effects of covariates (such as lockdown policies), and generate forecasts for smaller regions within countries. Consequently, it has strong implications for global planning and decision making. We constantly update forecasts and make all results freely available to any country in the world through an online Shiny dashboard.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Estimating NBA athlete performance using multilevel models</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/estimating-nba-athlete-performance-using-multilevel-models/</link>
      <pubDate>Tue, 21 Apr 2020 10:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/estimating-nba-athlete-performance-using-multilevel-models/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;:&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;In basketball, the athlete performance evaluation are generally based on variants of plus-minus and PER statistics Optimizing Athlete Performance calculated through multiple regression, ridge, or lasso models using likelihood-based or Bayesian approach. We developed a novel methodology based on principal components analysis and multilevel model to create new indexes such as Oliveira-Newell Score that can be used to evaluate player performance during a match, relevance score used to rank players in a season, and the consistence score used to evaluate the player contribution for their team based on random effects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modelling menstrual cycle length using state space models</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/modelling-menstrual-cycle-length-using-state-space-models/</link>
      <pubDate>Fri, 04 Oct 2019 09:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/modelling-menstrual-cycle-length-using-state-space-models/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;:&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
The ability to predict menstrual cycle length to a high degree of precision enables female athletes to track their period and tailortheir training and nutrition correspondingly knowing when to push harder when to prioritise recovery and how to minimise theimpact of menstrual symptoms on performance. Such individualisation is possible if cycle length can be predicted to a highdegree of accuracy. To achieve this, a hybrid predictive model was built using data on 16,990 cycles collected from a sampleof 2,178 women (mean age 33.89 years, range 14.98 - 47.10, number of menstrual cycles ranging from 4 - 53). To capture thewithin-subject temporal correlation, a mixed-effect state-space model was fitted incorporating a Bayesian approach for processforecasting to predict the duration (in days) of the next menstrual cycle. The modelling procedure was split into three steps(i)a time trend component using a random walk with an overdispersion parameter, (ii) an autocorrelation component using anautoregressive moving-average (ARMA) model, and (iii) a linear predictor to account for covariates (e.g. injury, stomach cramps,training intensity). The inclusion of an overdispersion parameter suggested that26.81% [24.14%,29.58%]of cycles in the samplewere overdispersed where the random walk standard deviation under a non-overdispersed cycle is1.0530 [1.0060,1.0526]days whileunder an overdispersed cycle it increased to4.7386 [4.5379,4.9492]days. To assess the performance and prediction accuracy ofthe model, each woman’s last observation was used as test data. The Root Mean Square Error (RMSE), Concordance CorrelationCoefficient (CCC) and Pearson correlation coefficient (r) between the observed and predicted values were calculated. The modelhad an RMSE of 1.6126 days, a precision of 0.7501 and overall accuracy of 0.9855. In the absence of hormonal measurements,knowing how aspects of physiology and psychology are changing across the menstrual cycle has the potential to help femaleathletes personalise their training, nutrition and recovery tailored to their cycle to sustain peak performance at the highest leveland gain a competitive edge. In conclusion, the hybrid model presented here is a useful approach for predicting menstrual cyclelength which in turn can be used to support female athlete wellness to optimise performance
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sugarcane straw management for bioenergy: effects of global warming on greenhouse gas emissions and soil carbon storage</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2019-soil/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2019-soil/</guid>
      <description>&lt;p&gt;Supplementary notes were added here, including &lt;a href=&#34;https://link.springer.com/article/10.1007/s11027-019-09880-7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;figures&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The longitudinal concordance correlation</title>
      <link>https://prof-thiagooliveira.netlify.com/talk/the-longitudinal-concordance-correlation/</link>
      <pubDate>Fri, 07 Jun 2019 09:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/talk/the-longitudinal-concordance-correlation/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;:&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;We present the lcc package, available from the Comprehensive R Archive Network (CRAN). The package implements estimation procedures for the longitudinal concordance correlation (LCC), using fixed effects and variance components estimates from linear mixed models. The LCC is a quantity that measures the extent of agreement between two (or more) methods used to evaluate a response variable of interest and is frequently applied in medicine, pharmacology, and agronomy. The main features of the package are the estimation and inference of the extent of agreement using numerical and graphical summaries. Moreover, our approach presents flexibility in the sense that it accommodates both balanced and unbalanced experimental designs, allows for different within-group error structures, while also allowing for the inclusion of covariates in the linear predictor to control systematic variations in the response. We illustrate our methodology by comparing different methods used to measure the peel colour of fruit as an assessment of ripeness.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lcc: Longitudinal Concordance Correlation</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2019-lcc-package/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2019-lcc-package/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Transmission efficiency of xylella fastidiosa subsp. Pauca sequence types by sharpshooter vectors after in vitro acquisition</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2019-phitopatology/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2019-phitopatology/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Longitudinal concordance correlation function based on variance components: an application in fruit color analysis</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2018-lcc/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2018-lcc/</guid>
      <description>&lt;p&gt;Supplementary notes were added here, including &lt;a href=&#34;https://link.springer.com/article/10.1007%2Fs13253-018-0321-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and data&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Measuring color hue in &#39;Sunrise Solo&#39; papaya using a flatbed scanner</title>
      <link>https://prof-thiagooliveira.netlify.com/publication/2017-papaya/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://prof-thiagooliveira.netlify.com/publication/2017-papaya/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
