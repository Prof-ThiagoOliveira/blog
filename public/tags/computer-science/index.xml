<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Science | Thiago Oliveira</title>
    <link>http://localhost:4321/tags/computer-science/</link>
      <atom:link href="http://localhost:4321/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <description>Computer Science</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 22 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:4321/media/logo_hua8192a3d26f52862b6ecd0fa00b0dcdd_44669_300x300_fit_lanczos_3.png</url>
      <title>Computer Science</title>
      <link>http://localhost:4321/tags/computer-science/</link>
    </image>
    
    <item>
      <title>The seven steps of a programer</title>
      <link>http://localhost:4321/post/the-seven-steps-of-a-programer/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:4321/post/the-seven-steps-of-a-programer/</guid>
      <description>&lt;style&gt;
/* Blog post container */
body {
   font-family: &#39;Helvetica Neue&#39;, Arial, sans-serif;
   font-size: 1rem;
   line-height: 1.8;
   color: #333;
   text-align: justify;
   background-color: #fafafa;
   margin: 0;
   padding: 0 20px;
}

/* Header styling */
h1, 
h2, 
h3, 
h4, 
h5, 
h6 {
  font-weight: 600; /* Semi-bold for a professional look */
  margin-bottom: 0.75em; /* Slightly reduced bottom margin */
  color: #0d0d0d;
  line-height: 1.2;
  margin-top: 1.5em; /* Added top margin for consistency */
}

h1 {
  font-size: 1.75rem; 
  border-bottom: 2px solid #3b80d1;
  padding-bottom: 0.3em; /* Padding for visual separation */
  margin-top: 1em; 
}

h2 {
  font-size: 1.5rem; 
  color: #3b80d1;
  padding-bottom: 0.2em; /* Padding for visual separation */
}

h3 {
  font-size: 1.25rem; 
  color: #333;
}

h4 {
  font-size: 1.125rem; 
  color: #333;
}

h5 {
  font-size: 1rem; 
  color: #333;
}

h6 {
  font-size: 0.875rem; 
  color: #333;
}

/* Link styling */
a {
  color: #3b80d0;
  text-decoration: none;
  transition: color 0.3s ease;
}

a:hover {
  text-decoration: underline;
  color: #1a57a0;
}

/* Code styling */
pre, 
.code-input {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  padding: 10px;
  font-size: 0.9rem;
  border-radius: 5px;
  margin: 20px 0;
  overflow-x: auto;
}

code {
  font-size: 0.9rem;
  background-color: #f5f5f5;
  padding: 2px 4px;
  border-radius: 3px;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 1.5em;
  text-align: left;
}

th, 
td {
  padding: 12px;
  border: 1px solid #ddd;
}

th {
  background-color: #3b80d1;
  color: white;
}

/* Div options - color box text */
.div-1 {
  color: black;
  background-color: #d6edd3;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 1.5em;
}

.div-2 {
  color: black;
  background-color: #cfbe7e;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 1.5em;
}

/* Article content */
.article-content {
  text-align: justify;
}

/* Image styling */
img {
  max-width: 100%;
  height: auto;
  border-radius: 5px;
  margin-bottom: 1.5em;
}
&lt;/style&gt;
&lt;h1 id=&#34;overview-of-the-seven-steps&#34;&gt;Overview of the Seven Steps&lt;/h1&gt;
&lt;p&gt;The seven steps proposed by Hilton et al. (2019) present an intriguing strategy for initiating a new project involving programming. This approach is concisely summarized in Figure 1. In this discussion, we will elaborate on these steps, drawing upon the work of Hilton et al. (2019).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;seven_steps.png&#34; alt=&#34;The seven steps (modified from Hilton et al. (2019))&#34; width=&#34;500px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The seven steps (modified from Hilton et al. (2019))&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All steps are then described in the sections below.&lt;/p&gt;
&lt;h1 id=&#34;step-1---project-definition-using-simple-examples&#34;&gt;Step 1 - Project definition using simple examples&lt;/h1&gt;
&lt;p&gt;This step involves dedicating time to conceptualize the project and breaking it down into manageable tasks. Begin by manually sketching a diagram of the project, highlighting key topics, strategies for addressing challenges, and estimating the number of primary algorithms required for completion. This should also encompass the subdivision of the project into smaller tasks, their interconnections, and any sequential order for their execution, as depicted in Figure 2. An effective approach in this stage is crucial as it simplifies the subsequent steps.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;main_project.png&#34; alt=&#34;Example of how divide the main project into small tasks&#34; width=&#34;500px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Example of how divide the main project into small tasks&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;example-1&#34;&gt;Example 1&lt;/h2&gt;
&lt;p&gt;Imagine we need to develop a &lt;code&gt;C++&lt;/code&gt; algorithm to calculate the total fat content ($y$) of a portion of ice cream. Assume this response variable is determined by the amounts of butyric fat ($x_1$) and vegetable fat ($x_2$). Let $E[y]$ represent the expected value of $y$, defined as:&lt;/p&gt;
$$E[y]=10-0.5x_1+0.6x_1^2-0.6x_2+0.2x_2^2+0.1x_1x_2$$
&lt;p&gt;
We can manually compute the total fat $y$ for specific values of $x_1$ and $x_2$. For instance, if $x_1=2$ and $x_2=1$, then:&lt;/p&gt;
$$y=10-0.5\times2+0.6\times 2^2-0.6\times 1+0.2 \times 1^2+0.1\times 2 \times 1 = 11.2.$$
&lt;p&gt;Now, let&amp;rsquo;s assume the secondary goal is to optimize the fat content in the ice cream formulation based on this model. This involves searching for the global minimum on the response surface. Consequently, we can break down our project into two tasks:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
1. Generalize the function for any $x_1$ and $x_2$; 
2. Calculate the global (or absolute) minimum point;
&lt;/div&gt;
&lt;p&gt;If you encounter difficulties in these tasks, it&amp;rsquo;s often due to a gap in specific domain knowledge, such as a lack of expertise in mathematics:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
* How could I calculate the global minimum? 
* How can I use partial derivatives?
&lt;/div&gt;
&lt;p&gt;Therefore, during this step, it is essential to identify all the necessary domain knowledge and address these gaps before proceeding to the next stage. Sometimes, this knowledge may stem from specialized areas such as computer science, sports, agriculture, statistics, or engineering.&lt;/p&gt;
&lt;h1 id=&#34;step-2---write-everything-you-did&#34;&gt;Step 2 - Write everything you did&lt;/h1&gt;
&lt;p&gt;In this phase, it is crucial to meticulously record every action undertaken to resolve the project&amp;rsquo;s challenges or tasks. Ensure that your notes are clear and detailed enough for others to replicate your solutions effortlessly. Be cautious not to overlook steps that might seem obvious, such as basic operations like multiplying $x$ by $y$, or the sequence in which tasks are to be executed.&lt;/p&gt;
&lt;h2 id=&#34;example-2&#34;&gt;Example 2&lt;/h2&gt;
&lt;p&gt;Consider the task of calculating $f(x, y) = x^y + 3x$ for $x=2$ and $y=4$. Here&amp;rsquo;s how you could document the process in a detailed and comprehensible manner:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
* Multiply 2 by 2 $\rightarrow$ you get 4
* Multiply 4 by 2 $\rightarrow$ you get 8
* Multiply 8 by 2 $\rightarrow$ you get 16
* Sum 16 plus 3 multiplied by 2 $\rightarrow$ you get 22
* 22 is the answer.
&lt;/div&gt;
&lt;p&gt;By following these explicit steps, anyone with basic mathematical skills should be able to reach the same result.&lt;/p&gt;
&lt;h1 id=&#34;step-3---generalize&#34;&gt;Step 3 - Generalize&lt;/h1&gt;
&lt;p&gt;The goal now is to transform the specific steps from earlier into a universal algorithm that applies to a broader range of cases, not just specific parameter values. Here are two common methods to achieve this generalization:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
* Re-examine the details from Step 2, as the key to generalization often lies within its description.
* Identify repetitive patterns, particularly where the same step is executed multiple times.
&lt;/div&gt;
&lt;p&gt;For instance, let&amp;rsquo;s generalize our Example 2 by adapting the steps from Step 2, replacing the specific occurrences of 2 with a variable $x$:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
* Multiply 2 by $x$ $\rightarrow$ you get 4
* Multiply 4 by $x$ $\rightarrow$ you get 8
* Multiply 8 by $x$ $\rightarrow$ you get 16
* Sum 16 plus 3 multiplied by $x$ $\rightarrow$ you get 22
* 22 is the answer.
&lt;/div&gt;
&lt;p&gt;It is important to note that the initial multiplication should start with $x \times x = x^2$. Therefore, we multiply $x$ by itself $y-1$ times to obtain $x^y$. This leads us to the following generalized steps for any values of $x$ and $y$:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Algorithm sketch 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;start with x = 2 and y = 4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;n[1] = x
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Count up from i in 1 to y-1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  n[i+1] = n[i] * x 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;z = n[y] + 3 * x
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;z is  the answer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;div-3&#34;&gt;
This process is referred to as writing &#39;pseudo-code&#39; as an algorithm design with no particular target language.
&lt;/div&gt;
&lt;h1 id=&#34;step-4---test-your-algorithm&#34;&gt;Step 4 - Test Your Algorithm&lt;/h1&gt;
&lt;p&gt;Testing your algorithm is a crucial step to ensure the correctness of steps 1-3 before advancing to step 5. Here are some key actions and considerations during this stage:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
* Test your algorithm with varying parameter values.
* Assess the algorithm&#39;s behavior for positive, negative, or zero values.
* Determine if you have confined the parameter space, e.g., $y \geq 0$.
* Employ mathematical proofs to validate your approach.
* Recognize that there may be more than one correct solution to a programming problem.
&lt;/div&gt;
&lt;div class=&#34;div-3&#34;&gt;
Remember, the parameter space refers to the range of possible parameter values that define a specific mathematical or statistical model, typically within a subset of the finite-dimensional Euclidean space.
&lt;/div&gt;
&lt;p&gt;At times, the generalization in step 3 might be incomplete, leading to a revisit of steps 1-2. This oversight often occurs when not all potential cases are considered or when mathematical proofs are lacking.&lt;/p&gt;
&lt;p&gt;A notable example of an algorithmic error is seen in Example 2. What if $y=0$ or $y&lt;0$? Our algorithm incorrectly addresses these cases. For example, with $x=2$ and $y=0$, the algorithm erroneously calculates $2^0=2$ instead of the correct $2^0=1$. Also, for any $y \leq 0$, the algorithm erroneously tries to count from $1$ to $y-1 &lt; 0$, which is not applicable for natural numbers, leading to an error. Therefore, we must ensure $|y| \in \mathcal{N}_{0}$, where $\mathcal{N}_{0}$ represents the set of natural numbers including zero. Consequently, we should aim to generalize our algorithm to accommodate a broader range of cases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Algorithm Sketch 2 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;y must be an integer number.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Start with x = 2 and y = 4.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;If y=0 {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  n[1] = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  i=0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} else {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Count from i = 1 to |y|-1;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  If y &amp;lt; 0 {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    n[1] = 1/x;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    n[i+1] = n[i] * (1/x);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  } else {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    n[1] = x;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    n[i+1] = n[i] * x;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;z = n[i+1] + 3 * x;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;z is the answer.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;div-3&#34;&gt;
Question: How can we improve this algorithm? Consider the case where $x=y=0$.
&lt;/div&gt;
&lt;p&gt;When encountering problems with our algorithm at this stage, we have two options:&lt;/p&gt;
&lt;div class=&#34;div-2&#34;&gt;
1. Return to steps 1-3 to gather more information for broadening the algorithm&#39;s applicability.
2. Directly fix the algorithm in step 4 when the solution is known.
&lt;/div&gt;
&lt;h2 id=&#34;example-3&#34;&gt;Example 3&lt;/h2&gt;
&lt;p&gt;The data in Figure 4 originates from an algorithm that accepts a single parameter, $N$, belonging to the set $\mathcal{N}_{0}$, where $\mathcal{N}_{0} = \mathcal{N} \cup \{ 0 \}$ denotes the set of natural numbers including zero. This algorithm generates a sequence of output values corresponding to each specified value of $N$.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;example3.png&#34; alt=&#34;Output of sequences of integers based on values of $N$ from 0 to 4&#34; width=&#34;400px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Output of sequences of integers based on values of $N$ from 0 to 4&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;div-3&#34;&gt;
Question: Can you deduce the algorithm that produced the numbers in this figure? Additionally, what would be the result for $N=5$?
&lt;/div&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;p&gt;[1] Hilton, AD; Lipp, GM; Rodger, SH, Translation from Problem to Code in Seven Steps, Comped 2019 Proceedings of the Acm Conference on Global Computing Education (2019), pp. 78-84.&lt;/p&gt;
&lt;h1 id=&#34;answers&#34;&gt;Answers&lt;/h1&gt;
&lt;h2 id=&#34;example-3-1&#34;&gt;Example 3&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Algorithm Sketch 3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set N as a non-negative integer (Natural number with zero).
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Initialize N with a specific value n.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Define the sequence parameters:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Minimum Value = 4 * N
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Maximum Value = 9 * N + 6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Sequence Increment = 3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Set x[1] to the Minimum Value.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Iteratively calculate the sequence:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    For each iteration i,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      if x[i-1] &amp;lt; Maximum Value,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        then x[i] = x[i-1] + Sequence Increment.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      else,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        break the loop.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  The sequence x represents the final answer.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight r code-input&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# N = 6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;N=5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;seq &amp;lt;- seq(4*N, 9*N+6, 3)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat(&amp;#34;The answer is&amp;#34;, seq)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;## The answer is 20 23 26 29 32 35 38 41 44 47 50
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;citation&#34;&gt;Citation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
Oliveira T.P. (2020, Dec. 16). The seven steps of a programer
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@misc{oliveira2020seven,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  author = {Oliveira, Thiago},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  title = {The seven steps of a programer},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  url = {https://prof-thiagooliveira.netlify.app/post/the-seven-steps-of-a-programer/},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  year = {2020}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expressions in C&#43;&#43;</title>
      <link>http://localhost:4321/post/expressions/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:4321/post/expressions/</guid>
      <description>&lt;style&gt;
/* Blog post container */
body {
   font-family: &#39;Helvetica Neue&#39;, Arial, sans-serif;
   font-size: 1rem;
   line-height: 1.8;
   color: #333;
   text-align: justify;
   background-color: #fafafa;
   margin: 0;
   padding: 0 20px;
}

/* Header styling */
h1, 
h2, 
h3, 
h4, 
h5, 
h6 {
  font-weight: 600; /* Semi-bold for a professional look */
  margin-bottom: 0.75em; /* Slightly reduced bottom margin */
  color: #0d0d0d;
  line-height: 1.2;
  margin-top: 1.5em; /* Added top margin for consistency */
}

h1 {
  font-size: 1.75rem; 
  border-bottom: 2px solid #3b80d1;
  padding-bottom: 0.3em; /* Padding for visual separation */
  margin-top: 1em; 
}

h2 {
  font-size: 1.5rem; 
  color: #3b80d1;
  padding-bottom: 0.2em; /* Padding for visual separation */
}

h3 {
  font-size: 1.25rem; 
  color: #333;
}

h4 {
  font-size: 1.125rem; 
  color: #333;
}

h5 {
  font-size: 1rem; 
  color: #333;
}

h6 {
  font-size: 0.875rem; 
  color: #333;
}

/* Link styling */
a {
  color: #3b80d0;
  text-decoration: none;
  transition: color 0.3s ease;
}

a:hover {
  text-decoration: underline;
  color: #1a57a0;
}

/* Code styling */
pre, 
.code-input {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  padding: 10px;
  font-size: 0.9rem;
  border-radius: 5px;
  margin: 20px 0;
  overflow-x: auto;
}

code {
  font-size: 0.9rem;
  background-color: #f5f5f5;
  padding: 2px 4px;
  border-radius: 3px;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 1.5em;
  text-align: left;
}

th, 
td {
  padding: 12px;
  border: 1px solid #ddd;
}

th {
  background-color: #3b80d1;
  color: white;
}

/* Div options - color box text */
.div-1 {
  color: black;
  background-color: #d6edd3;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 1.5em;
}

.div-2 {
  color: black;
  background-color: #cfbe7e;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 1.5em;
}

/* Article content */
.article-content {
  text-align: justify;
}

/* Image styling */
img {
  max-width: 100%;
  height: auto;
  border-radius: 5px;
  margin-bottom: 1.5em;
}
&lt;/style&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Expressions in C++ are fundamental constructs made up of operators, constants, and variables, following the language&amp;rsquo;s syntactical rules. Every expression is a segment of a code that returns a value. For instance:&lt;/p&gt;
&lt;img src=&#34;exp1.png&#34; width=&#34;320px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;This example demonstrates the creation of variables to store values: a box for $x$ and another for $y$, where $y$ equals the expression $x + 13$ (thus, $y = 23$). Now, let&amp;rsquo;s delve into a more complex example:&lt;/p&gt;
&lt;img src=&#34;exp2.png&#34; width=&#34;500px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;This statement encompasses three expressions:&lt;/p&gt;
&lt;div class=&#34;div-1&#34;&gt;
* The results of the expression $3 - x$ is stored in the variable $y$
* The expression $y = 3 - x$ returns the value of $y$, and it is stored in the variable $v$
* The results of the expression $y \times \left(\frac{v}{5} + x\right)$ is stored in the variable $z$
&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s essential to remember the precedence of operations: multiplication and division are executed before addition and subtraction. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1-3*4 = -11
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2/3-4*2/3 = -2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2/3-4/4*2/3 = 0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Operator precedence&lt;/strong&gt; in &lt;code&gt;C++&lt;/code&gt; determines the sequence of operations in an expression. Operators have a specific order of execution relative to others. For instance, in the expression $\frac{2}{4} - 3 + 4 \times 6$, the subexpressions $\frac{2}{4}$&lt;code&gt;and&lt;/code&gt;$4 \times 6$ are calculated first, followed by the addition and subtraction. When operators have the same precedence, their associativity dictates the order - either left-to-right or right-to-left.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;exp3.png&#34; alt=&#34;Precedence order&#34; width=&#34;300px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Precedence order&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Associativity&lt;/strong&gt; specifies the order of operations for operators with the same precedence level. It can be left-to-right or right-to-left. Typically, addition, subtraction, multiplication, and division are left-associative, while assignment operators are right-associative. Some operators are non-associative, meaning their behaviour is undefined if used sequentially in an expression. Parentheses can alter the default associativity, enforcing a specific order.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;exp4.png&#34; alt=&#34;Example of left-associative, right-associative, and non-associative&#34; width=&#34;800px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Example of left-associative, right-associative, and non-associative&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;using-parentheses-&#34;&gt;Using Parentheses &lt;code&gt;()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The operator &lt;code&gt;()&lt;/code&gt; has the highest precedente order (see &lt;a href=&#34;#table1&#34;&gt;Table 1&lt;/a&gt;), as consequence, we can use parentheses to change the sequence of operators.
Consider the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5 + 6 * 7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; operator is evaluated firstly, followed by the &lt;code&gt;+&lt;/code&gt; operator, so the result is $5+6\times 7 = 47$. However, if we want to account for the addiction first and then the multiplication, we can rewrite the code as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(5 + 6) * 7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, the program will compute $\left(5+6\right)\times 7=11\times 7=77$. Sometimes, parentheses&amp;rsquo; inclusion should be important to make your code easier to understand, and therefore easier to maintain.&lt;/p&gt;
&lt;h1 id=&#34;modulus-operator-&#34;&gt;Modulus operator (%)&lt;/h1&gt;
&lt;p&gt;The modulus operator evaluates the remainder when dividing the first operand by the second one. Ex.: &lt;code&gt;a % b&lt;/code&gt; is the remainder when $a$ is divided&lt;table class=&#34;wikitable&#34;&gt;&lt;/p&gt;
&lt;p&gt;by $b$ ($a$ modulus $b$).&lt;table class=&#34;wikitable&#34;&gt; by $b$ ($a$ modulus $b$).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;exp5.png&#34; alt=&#34;Example of modulus&#34; width=&#34;300px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Example of modulus&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;div-1&#34;&gt;
* Dividing an integer by another one gives an integer.
&lt;/div&gt;
&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int x = 10;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int y = 3;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x/y = 10/3 = 3 (dividing two integers)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x % y = 1 (modulus)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;short-hand-or-syntatic-sugar&#34;&gt;Short hand or syntatic sugar&lt;/h1&gt;
&lt;p&gt;Short hand expressions provide a straightforward way to write common patterns over the algorithm for initialized variables.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Short hand&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Prefix and Postfix&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$x+=y$&lt;/td&gt;
&lt;td&gt;$x=x+y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x-=y$&lt;/td&gt;
&lt;td&gt;$x=x-y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x*=y$&lt;/td&gt;
&lt;td&gt;$x= x \times y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x/=y$&lt;/td&gt;
&lt;td&gt;$x=x/y$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x++$&lt;/td&gt;
&lt;td&gt;$x=x+1$&lt;/td&gt;
&lt;td&gt;Return the value of $x$ first then increment it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$++x$&lt;/td&gt;
&lt;td&gt;$x=x+1$&lt;/td&gt;
&lt;td&gt;Increment first then return the value of $x$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$x--$&lt;/td&gt;
&lt;td&gt;$x=x-1$&lt;/td&gt;
&lt;td&gt;Return the value of $x$ first then increment it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$--x$&lt;/td&gt;
&lt;td&gt;$x=x-1$&lt;/td&gt;
&lt;td&gt;Increment first then return the value of $x$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;example-1&#34;&gt;Example 1:&lt;/h2&gt;
&lt;p&gt;Here you can see that &lt;code&gt;y ++= x * z;&lt;/code&gt; is calculate as $y=y+x \times z = 30 + 2 \times 4 = 38$.&lt;/p&gt;
&lt;img src=&#34;example1.png&#34; width=&#34;350px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h2 id=&#34;example-2&#34;&gt;Example 2:&lt;/h2&gt;
&lt;p&gt;In this example you can see that we used the postfix &lt;code&gt;x++&lt;/code&gt; to first initialize $y$ ($y=8 \times x = 8 \times 7 = 56$) and then update $x$ to &lt;code&gt;x=x+1=8&lt;/code&gt;. On the other hand, we used the prefix &lt;code&gt;--y&lt;/code&gt; to first update the variable $y$ to &lt;code&gt;y=y-1=55&lt;/code&gt; and then calculate the variable z using the updated $y$ $\left(z = y/5 = 55/5 = 11 \right)$.&lt;/p&gt;
&lt;img src=&#34;example2.png&#34; width=&#34;500px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;Note that when we use &lt;code&gt;x*= (y/z) % 2&lt;/code&gt; the variable $x$ multiply the entire expression after &lt;code&gt;=&lt;/code&gt; symbol. This expression is equivalent to &lt;code&gt;x = x * ((y/z) % 2));&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;operator-precedence-and-associativity&#34;&gt;Operator precedence and associativity&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;#table1&#34;&gt;Table 1&lt;/a&gt; shows a list of precedence (ordered) and associativity of C operators. This table was obtained from
&lt;a href=&#34;https://en.cppreference.com/w/c/language/operator_precedence#cite_note-1&#34;&gt;cppreference.com&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
&lt;table class=&#34;wikitable&#34;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;a name=&#34;table1&#34;&gt; Table 1: Precedence and associativity of C operators &lt;/a&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Precedence
&lt;/th&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Operator
&lt;/th&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Description
&lt;/th&gt;
&lt;th style=&#34;text-align: left&#34;&gt; Associativity
&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;6&#34;&gt; 1
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;++&lt;/code&gt; &lt;code&gt;\-\-&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; Suffix/postfix increment and decrement
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;6&#34;&gt; Left-to-right
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;()&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Function call
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;[]&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Array subscripting
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;.&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Structure and union member access
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Structure and union member access through pointer
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;(&lt;i&gt;type&lt;/i&gt;){&lt;i&gt;list&lt;/i&gt;}&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Compound literal&lt;span class=&#34;t-mark-rev t-since-c99&#34;&gt;(C99)&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;8&#34;&gt; 2
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;++&lt;/code&gt; &lt;code&gt;\-\-&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; Prefix increment and decrement&lt;sup id=&#34;cite_ref-1&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-1&#34;&gt;[note 1]&lt;/a&gt;&lt;/sup&gt;
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;8&#34;&gt; Right-to-left
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Unary plus and minus
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;!&lt;/code&gt; &lt;code&gt;~&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Logical NOT and bitwise NOT
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;(&lt;i&gt;type&lt;/i&gt;)&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Cast
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;*&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Indirection (dereference)
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Address-of
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;sizeof&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Size-of&lt;sup id=&#34;cite_ref-2&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-2&#34;&gt;[note 2]&lt;/a&gt;&lt;/sup&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;_Alignof&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Alignment requirement&lt;span class=&#34;t-mark-rev t-since-c11&#34;&gt;(C11)&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 3
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;%&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Multiplication, division, and remainder
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;11&#34;&gt; Left-to-right
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 4
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Addition and subtraction
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 5
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise left shift and right shift
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;2&#34;&gt; 6
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; For relational operators &amp;lt; and ≤ respectively
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; For relational operators &amp;gt; and ≥ respectively
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 7
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;==&lt;/code&gt; &lt;code&gt;!=&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; For relational = and ≠ respectively
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 8
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise AND
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 9
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;^&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise XOR (exclusive or)
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 10
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;|&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Bitwise OR (inclusive or)
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 11
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Logical AND
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 12
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;||&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Logical OR
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 13
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;?:&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Ternary conditional&lt;sup id=&#34;cite_ref-3&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-3&#34;&gt;[note 3]&lt;/a&gt;&lt;/sup&gt;
&lt;/td&gt;
&lt;td style=&#34;vertical-align: top&#34; rowspan=&#34;6&#34;&gt; Right-to-Left
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;5&#34;&gt; 14&lt;sup id=&#34;cite_ref-4&#34; class=&#34;reference&#34;&gt;&lt;a href=&#34;#cite_note-4&#34;&gt;[note 4]&lt;/a&gt;&lt;/sup&gt;
&lt;/th&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; &lt;code&gt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none&#34;&gt; Simple assignment
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;+=&lt;/code&gt; &lt;code&gt;-=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Assignment by sum and difference
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;*=&lt;/code&gt; &lt;code&gt;/=&lt;/code&gt; &lt;code&gt;%=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Assignment by product, quotient, and remainder
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-bottom-style: none; border-top-style: none&#34;&gt; Assignment by bitwise left shift and right shift
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; &lt;code&gt;&amp;amp;=&lt;/code&gt; &lt;code&gt;^=&lt;/code&gt; &lt;code&gt;|=&lt;/code&gt;
&lt;/td&gt;
&lt;td style=&#34;border-top-style: none&#34;&gt; Assignment by bitwise AND, XOR, and OR
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt; 15
&lt;/th&gt;
&lt;td&gt; &lt;code&gt;,&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt; Comma
&lt;/td&gt;
&lt;td&gt; Left-to-right
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;ol class=&#34;references&#34;&gt;
&lt;li id=&#34;cite_note-1&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-1&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;The operand of prefix &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;\-\-&lt;/code&gt; can&#39;t be a type cast. This rule grammatically forbids some expressions that would be semantically invalid anyway. Some compilers ignore this rule and detect the invalidity semantically.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&#34;cite_note-2&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-2&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;The operand of &lt;code&gt;sizeof&lt;/code&gt; can&#39;t be a type cast: the expression &lt;code&gt;sizeof (int) * p&lt;/code&gt; is unambiguously interpreted as &lt;code&gt;(sizeof(int)) * p&lt;/code&gt;, but not &lt;code&gt;sizeof((int)*p)&lt;/code&gt;.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&#34;cite_note-3&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-3&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;The expression in the middle of the conditional operator (between &lt;code&gt;&lt;b&gt;?&lt;/b&gt;&lt;/code&gt; and &lt;code&gt;&lt;b&gt;:&lt;/b&gt;&lt;/code&gt;) is parsed as if parenthesized: its precedence relative to &lt;code&gt;?:&lt;/code&gt; is ignored.&lt;/span&gt;
&lt;/li&gt;
&lt;li id=&#34;cite_note-4&#34;&gt;&lt;span class=&#34;mw-cite-backlink&#34;&gt;&lt;a href=&#34;#cite_ref-4&#34;&gt;↑&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;reference-text&#34;&gt;Assignment operators&#39; left operands must be unary (level-2 non-cast) expressions. This rule grammatically forbids some expressions that would be semantically invalid anyway. Many compilers ignore this rule and detect the invalidity semantically. For example, &lt;span class=&#34;t-c&#34;&gt;&lt;span class=&#34;mw-geshi c source-c&#34;&gt;e &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;sy1&#34;&gt;&amp;lt;&lt;/span&gt; d &lt;span class=&#34;sy4&#34;&gt;?&lt;/span&gt; a&lt;span class=&#34;sy2&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;sy4&#34;&gt;:&lt;/span&gt; a &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; d&lt;/span&gt;&lt;/span&gt; is an expression that cannot be parsed because of this rule. However, many compilers ignore this rule and parse it as &lt;span class=&#34;t-c&#34;&gt;&lt;span class=&#34;mw-geshi c source-c&#34;&gt;e &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;sy1&#34;&gt;&amp;lt;&lt;/span&gt; d&lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sy4&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;br0&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;sy2&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sy4&#34;&gt;:&lt;/span&gt; a&lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sy1&#34;&gt;=&lt;/span&gt; d &lt;span class=&#34;br0&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and then give an error because it is semantically invalid.&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id=&#34;impact-of-data-types-on-expressions&#34;&gt;Impact of Data Types on Expressions&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;C++&lt;/code&gt;, the data type of the variables involved in an expression significantly impacts the result. For instance, dividing two integers results in an integer, while using at least one floating-point number yields a floating-point result. Understanding how data types interact within expressions is crucial for accurate calculations and avoiding common pitfalls like integer truncation.&lt;/p&gt;
&lt;p&gt;Here are some key points about integer truncation and other common pitfalls in C++:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integer Truncation&lt;/strong&gt;: This occurs when the result of a division or other operation between integers is a floating-point number, but the data type is an integer. For example, &lt;code&gt;int result = 5 / 2;&lt;/code&gt; will store &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;result&lt;/code&gt;, not &lt;code&gt;2.5&lt;/code&gt;, as the fractional part is truncated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implicit Type Conversions&lt;/strong&gt;: &lt;code&gt;C++&lt;/code&gt; automatically converts types in certain situations, which can lead to unexpected results. For instance, mixing signed and unsigned integers in expressions can cause unexpected behaviours due to implicit type conversions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Overflow and Underflow&lt;/strong&gt;: This happens when a variable is assigned a value outside its range. For example, storing a value larger than the maximum value that an &lt;code&gt;int&lt;/code&gt; can hold will result in overflow, leading to unexpected values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Precision Loss in Floating-Point Numbers&lt;/strong&gt;: Floating-point variables can lose precision, especially when dealing with very large or very small numbers. This can result in rounding errors in calculations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Division by Zero&lt;/strong&gt;: This can occur if a program inadvertently divides a number by zero. It&amp;rsquo;s a critical error in &lt;code&gt;C++&lt;/code&gt; and can cause a program to crash or behave unpredictably.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Uninitialized Variables&lt;/strong&gt;: Using variables before initializing them can lead to unpredictable results, as they may contain random data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pointer Errors&lt;/strong&gt;: Common mistakes with pointers include dereferencing a null or uninitialized pointer, pointer arithmetic errors, and memory leaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operator Precedence Mistakes&lt;/strong&gt;: Misunderstanding the order in which operations are performed can lead to bugs. For example, assuming that &lt;code&gt;a + b * c&lt;/code&gt; adds &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; before multiplying by &lt;code&gt;c&lt;/code&gt; (it doesn&amp;rsquo;t; multiplication is done first).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assuming Size of Data Types is Constant&lt;/strong&gt;: The size of data types like &lt;code&gt;int&lt;/code&gt; can vary depending on the system. Assuming a constant size can lead to errors, particularly when performing operations like bit manipulation or working with binary file formats.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Not Checking the Return Value of Functions&lt;/strong&gt;: When functions return values to indicate success or failure, not checking these can lead to the program continuing as if nothing went wrong, even when errors have occurred.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;role-of-type-casting-in-expressions&#34;&gt;Role of Type Casting in Expressions&lt;/h2&gt;
&lt;p&gt;Type casting in expressions can be used to explicitly convert data from one type to another. This technique is particularly useful in situations where operations between different data types are necessary. For example, casting an integer to a float in a division operation to obtain a floating-point result. However, it&amp;rsquo;s important to use type casting judiciously to maintain the precision and integrity of data.&lt;/p&gt;
&lt;h2 id=&#34;the-significance-of-expression-evaluation-order&#34;&gt;The Significance of Expression Evaluation Order&lt;/h2&gt;
&lt;p&gt;While operator precedence and associativity rules dictate the order of operations in an expression, the sequence in which expressions are evaluated can also be influenced by function calls, side effects, and sequence points. Understanding how &lt;code&gt;C++&lt;/code&gt; evaluates expressions, especially in complex statements, is essential for debugging and writing predictable code.&lt;/p&gt;
&lt;h2 id=&#34;compiler-optimizations-and-expressions&#34;&gt;Compiler Optimizations and Expressions&lt;/h2&gt;
&lt;p&gt;Modern &lt;code&gt;C++&lt;/code&gt; compilers often optimize expressions to enhance performance. These optimizations might include reordering operations (while respecting the language rules), eliminating redundant calculations, or simplifying expressions at compile time. Being aware of these potential optimizations can help in writing more efficient code and understanding any discrepancies between the written code and its execution behaviour.&lt;/p&gt;
&lt;h2 id=&#34;best-practices-for-writing-expressions&#34;&gt;Best Practices for Writing Expressions&lt;/h2&gt;
&lt;p&gt;To maintain readability and reduce errors in &lt;code&gt;C++&lt;/code&gt;, it&amp;rsquo;s advisable to write clear and simple expressions. Avoid overly complex expressions, use parentheses to clarify order of operations, and follow coding standards and guidelines. Readable expressions are easier to debug, maintain, and understand, especially in collaborative environments.&lt;/p&gt;
&lt;p&gt;Adding these paragraphs can provide a more comprehensive and nuanced understanding of expressions in &lt;code&gt;C++&lt;/code&gt;, catering to both beginners and experienced programmers.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;C Operator Precedence - &lt;a href=&#34;https://en.cppreference.com/w/c/language/operator_precedence#cite_note-1&#34;&gt;https://en.cppreference.com/w/c/language/operator_precedence#cite_note-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;citation&#34;&gt;Citation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
Oliveira T.P. (2020, Dec. 16). Expressions in C++
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@misc{oliveira2020expression,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  author = {Oliveira, Thiago},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  title = {Expressions in C++},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  url = {https://prof-thiagooliveira.netlify.app/post/expressions/},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  year = {2020}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Signed and Unsigned Binary Numbers</title>
      <link>http://localhost:4321/post/signed-and-unsigned-binary-numbers/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:4321/post/signed-and-unsigned-binary-numbers/</guid>
      <description>&lt;style&gt;
/* Blog post container */
body {
   font-family: &#39;Helvetica Neue&#39;, Arial, sans-serif;
   font-size: 1rem;
   line-height: 1.8;
   color: #333;
   text-align: justify;
   background-color: #fafafa;
   margin: 0;
   padding: 0 20px;
}

/* Header styling */
h1, 
h2, 
h3, 
h4, 
h5, 
h6 {
  font-weight: 600; /* Semi-bold for a professional look */
  margin-bottom: 0.75em; /* Slightly reduced bottom margin */
  color: #0d0d0d;
  line-height: 1.2;
  margin-top: 1.5em; /* Added top margin for consistency */
}

h1 {
  font-size: 1.75rem; 
  border-bottom: 2px solid #3b80d1;
  padding-bottom: 0.3em; /* Padding for visual separation */
  margin-top: 1em; 
}

h2 {
  font-size: 1.5rem; 
  color: #3b80d1;
  padding-bottom: 0.2em; /* Padding for visual separation */
}

h3 {
  font-size: 1.25rem; 
  color: #333;
}

h4 {
  font-size: 1.125rem; 
  color: #333;
}

h5 {
  font-size: 1rem; 
  color: #333;
}

h6 {
  font-size: 0.875rem; 
  color: #333;
}

/* Link styling */
a {
  color: #3b80d0;
  text-decoration: none;
  transition: color 0.3s ease;
}

a:hover {
  text-decoration: underline;
  color: #1a57a0;
}

/* Code styling */
pre, 
.code-input {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  padding: 10px;
  font-size: 0.9rem;
  border-radius: 5px;
  margin: 20px 0;
  overflow-x: auto;
}

code {
  font-size: 0.9rem;
  background-color: #f5f5f5;
  padding: 2px 4px;
  border-radius: 3px;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 1.5em;
  text-align: left;
}

th, 
td {
  padding: 12px;
  border: 1px solid #ddd;
}

th {
  background-color: #3b80d1;
  color: white;
}

/* Div options - color box text */
.div-1 {
  color: black;
  background-color: #d6edd3;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 1.5em;
}

.div-2 {
  color: black;
  background-color: #cfbe7e;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 1.5em;
}

/* Article content */
.article-content {
  text-align: justify;
}

/* Image styling */
img {
  max-width: 100%;
  height: auto;
  border-radius: 5px;
  margin-bottom: 1.5em;
}
&lt;/style&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When programming in C, a fundamental step is understanding variable assignment. C offers various data types, and here we focus on &lt;code&gt;int&lt;/code&gt;, used for integer data. There are two primary methods to define an &lt;code&gt;int&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class=&#34;div-1&#34;&gt;
* **Uninitialized Variable**: Defined simply as `int x;`, this approach does not assign an initial value to the variable $x$ (Figure 1). It&#39;s generally advisable to avoid this since it can lead to bugs if $x$ remains unassigned throughout the code. 
* **Initialized Variable**: Assigning a value to $x$ can be done in two ways (Figure 1):
  &lt;div class = &#34;div-2&#34;&gt;
    * Single-step declaration - `int x = 3;`
    * Two-step declaration - First, declare with `int x;` then assign with `x = 3;`
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;var_and_exp.png&#34; alt=&#34;Declaring variables in C&#34; width=&#34;550px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Declaring variables in C&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, C provides various storage sizes for integer variables. We will briefly introduce this concept. Figure 2 illustrates the representation of integers, either as whole numbers or fixed-point numbers (with a fixed number of digits). Typically, computers use a set number of bits to represent these integers. Common bit-lengths for integers include 8-bit, 16-bit (&lt;code&gt;short&lt;/code&gt;), 32-bit (&lt;code&gt;long&lt;/code&gt;), or 64-bit (&lt;code&gt;long long&lt;/code&gt;). There are two main schemes for integer representation: the signed integer type (&lt;code&gt;signed int&lt;/code&gt;), which can store values ranging from -32,767 to 32,767, and the unsigned integer type (&lt;code&gt;unsigned int&lt;/code&gt;), which encompasses values from 0 to 65,535 (calculated as $32767 \times 2 + 1$). The &lt;code&gt;unsigned&lt;/code&gt; qualifier is particularly useful when dealing exclusively with positive values.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;binary_number.png&#34; alt=&#34;Integer Representation&#34; width=&#34;500px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Integer Representation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Furthermore, there are three representation schemes for signed integers: &lt;em&gt;Sign-Magnitude Representation&lt;/em&gt;, &lt;em&gt;1&amp;rsquo;s Complement Representation&lt;/em&gt;, and &lt;em&gt;2&amp;rsquo;s Complement Representation&lt;/em&gt;. These schemes are crucial for representing negative numbers in binary form. In all these schemes, positive signed binary numbers begin with a 0, while negative numbers start with a 1 (Figure 3).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;sign_bit.png&#34; alt=&#34;Signed binary numbers&#34; width=&#34;300px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Signed binary numbers&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A limitation of signed binary numbers is that one bit is dedicated to indicating the sign (positive or negative), leaving the remaining $n-1$ bits for the number&amp;rsquo;s magnitude, ranging from $-2^{n-1}$ to $2^{n-1}$. For instance, in an 8-bit signed binary number, one bit is for the sign, and the remaining seven bits are for the magnitude:&lt;/p&gt;
&lt;div class=&#34;div-1&#34;&gt;
* With Sign-Magnitude Representation:
$$ -|2^{(8-1)}-1| \mbox{ to } 2^{(8-1)}-1 = -127 \mbox{ to } 127 $$
* With 2&#39;s Complement Representation:
$$ -2^{(8-1)} \mbox{ to } 2^{(8-1)}-1 = -128 \mbox{ to } 127 $$
&lt;/div&gt;
&lt;p&gt;Therefore, using 2&amp;rsquo;s Complement Representation, we can represent numbers from -128 to 127. You might wonder why there&amp;rsquo;s an additional number in the range with 2&amp;rsquo;s Complement. The answer lies in the unique way this representation handles the negative of the lowest negative number, which can be seen in Figure 4.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;repre_scheme.png&#34; alt=&#34;Representation schemes of Sign-Magnitude Representation and 2&#39;s Complement Representation&#34; width=&#34;400px&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Representation schemes of Sign-Magnitude Representation and 2&#39;s Complement Representation&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;dive-into-the-world-of-integer-representations&#34;&gt;Dive Into the World of Integer Representations!&lt;/h1&gt;
&lt;p&gt;Embark on an exhilarating journey through the binary landscape of computer science! We&amp;rsquo;re set to explore the intricate ways of representing integers, both unsigned and signed, using the power of binary digits. This adventure will take us through two riveting examples, complete with R code snippets for a hands-on experience!&lt;/p&gt;
&lt;h2 id=&#34;unveiling-the-unsigned-integers&#34;&gt;Unveiling the Unsigned Integers&lt;/h2&gt;
&lt;p&gt;Picture a sequence of numbers $x$, where $x \in \lbrace 0, 1, \ldots, 15 \rbrace$. We&amp;rsquo;re about to represent these numbers as 4-bit unsigned integers. Imagine this: &lt;strong&gt;4 bits&lt;/strong&gt;, each a 0 or 1, combining in myriad ways to encapsulate numbers from 0 to 15. Our journey here explores the interval $[0, 2^{4}−1] \in \mathcal{N}_{0}$.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an R snippet to visualize this transformation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kableExtra&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;was&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;built&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;under&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.4.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;color: black; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;Representation of numbers from 0 to 15 in 4 bits&lt;/caption&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; bits &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0111 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; x &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 8 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 9 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 10 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 11 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 12 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 13 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 14 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 15 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Prepare to be amazed as simple integers transform into a beautiful array of zeros and ones!&lt;/p&gt;
&lt;h2 id=&#34;deciphering-signed-integers&#34;&gt;Deciphering Signed Integers&lt;/h2&gt;
&lt;p&gt;Next, let&amp;rsquo;s step into the world of signed integers, representing a sequence $y$ within $\{-7, -6, \ldots, 6, 7\}$. With 4 bits at our disposal, one bit becomes the &lt;strong&gt;sign bit&lt;/strong&gt;, while the remaining three are &lt;strong&gt;magnitude bits&lt;/strong&gt;. This setup enables us to span $y$ within the range $\left[-|2^3-1|, 2^3-1\right] \in \mathcal{Z}$.&lt;/p&gt;
&lt;p&gt;Witness the Sign-Magnitude Representation, where the first bit unveils the sign, and the rest narrate the magnitude:&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;color: black; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;Sign-Magnitude Representation of numbers from -7 to 7 using 4 bits&lt;/caption&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; bits &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0111 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; y &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -7 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;But the intrigue doesn&amp;rsquo;t end there! Introducing the 2&amp;rsquo;s Complement Representation, a brilliant method to elegantly incorporate negative numbers. This approach allows us to explore the depths of the negative spectrum, all the way to -8:&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;color: black; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;2&#39;s Complement Representation of numbers from -8 to 7 using 4 bits&lt;/caption&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; bits &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1111 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0000 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0001 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0010 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0011 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0100 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0101 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0110 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; y &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -8 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -7 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; -1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 3 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 4 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 5 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 6 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 7 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These examples, enriched with R code for hands-on experimentation! 🌌💻🚀&lt;/p&gt;
&lt;h1 id=&#34;exploring-further-a-new-perspective-on-integer-representations&#34;&gt;Exploring Further: A New Perspective on Integer Representations&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s delve deeper into the world of integer representations with a fresh example! We&amp;rsquo;ll take a different approach, offering a new perspective to understand and construct binary representations. This time, we&amp;rsquo;ll focus on a practical application that brings these concepts to life.&lt;/p&gt;
&lt;h2 id=&#34;example-binary-encoding-of-characters&#34;&gt;Example: Binary Encoding of Characters&lt;/h2&gt;
&lt;p&gt;Imagine you want to represent characters (like letters and symbols) in binary. This is essential in computer science, as it allows for the storage and transmission of text in a form that computers can process. We&amp;rsquo;ll use the ASCII (American Standard Code for Information Interchange) system, a widely used method to encode characters.&lt;/p&gt;
&lt;p&gt;Each character in ASCII is assigned a unique number, and this number is then represented in binary. For example, the upper-case letter &amp;lsquo;A&amp;rsquo; is represented by the number 65 in ASCII, which corresponds to the binary number 01000001.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an R snippet to visualize this transformation for a set of characters:&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;color: black; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;Binary Encoding of Characters Using ASCII&lt;/caption&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;  &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; Char &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; ASCII &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; Binary &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; A &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; A &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 41 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000001 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; B &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; B &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 42 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000010 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; C &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; C &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 43 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000011 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; D &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; D &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 44 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000100 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; E &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; E &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 45 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000101 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; F &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; F &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 46 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000110 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; G &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; G &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 47 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001000111 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; H &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; H &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 48 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001001000 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; I &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; I &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 49 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001001001 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;font-weight: bold;border-right:1px solid;&#34;&gt; J &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; J &lt;/td&gt;
   &lt;td style=&#34;text-align:left;font-family: monospace;&#34;&gt; 4a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 00000000000000000000000001001010 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This example shows how characters are converted to ASCII values and then to their binary equivalents, demonstrating the practical application of binary representation in everyday computing tasks. Such an understanding is crucial for tasks like data encoding, cryptography, and digital communication.&lt;/p&gt;
&lt;p&gt;This fresh perspective, combined with hands-on R code, adds another layer to our understanding of binary representations in the digital world. It&amp;rsquo;s not just about numbers; it&amp;rsquo;s about how even the simplest characters we use every day are translated into a language that computers understand. 🌐🔢🖥️&lt;/p&gt;
&lt;h1 id=&#34;efficiency-in-data-storage-numbers-vs-letters&#34;&gt;Efficiency in Data Storage: Numbers vs. Letters&lt;/h1&gt;
&lt;p&gt;As we wrap up our exploration of binary representations, it&amp;rsquo;s crucial to understand why storing numbers instead of letters (words) is often more efficient and preferred in terms of memory usage. This principle is key in optimizing data storage and processing in computing systems.&lt;/p&gt;
&lt;h2 id=&#34;why-numbers-trump-letters-for-memory-efficiency&#34;&gt;Why Numbers Trump Letters for Memory Efficiency&lt;/h2&gt;
&lt;h3 id=&#34;compact-representation&#34;&gt;Compact Representation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fixed Length&lt;/strong&gt;: Numbers, especially integers, typically have a fixed-length representation in binary. For example, a 32-bit system will represent all integers using 32 bits, regardless of the value. This uniformity leads to more predictable and efficient memory usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Greater Density&lt;/strong&gt;: A single number can represent a large range of values. For example, a 32-bit integer can represent over 4 billion different values, while 32 bits allocated for characters might only store a few words.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;processing-speed&#34;&gt;Processing Speed:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simpler Operations&lt;/strong&gt;: Numerical data allows for more straightforward and faster arithmetic operations compared to string processing, which involves character-by-character manipulation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimized Hardware&lt;/strong&gt;: Computer processors are inherently designed to handle numerical calculations efficiently. Operations on numbers are generally faster due to hardware-level optimizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memory-management&#34;&gt;Memory Management:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Less Overhead&lt;/strong&gt;: Storing numbers reduces the need for additional memory overhead compared to strings. For instance, numbers do not require extra characters for delimiters or markers that are often needed in text.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indexing and Searching&lt;/strong&gt;: It&amp;rsquo;s quicker to index and search through numerical data compared to textual data. This efficiency is crucial in database operations and large-scale data processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;application-in-real-world-scenarios&#34;&gt;Application in Real-World Scenarios:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encoding Complexity&lt;/strong&gt;: Complex data like images, videos, and sound are more efficiently stored and processed as numerical values rather than trying to represent them as lengthy strings of text.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Analysis and Machine Learning&lt;/strong&gt;: Numerical data is more amenable to statistical analysis and machine learning algorithms, which rely heavily on numerical inputs for predictions and insights.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, while both numbers and letters have their place in data representation, the choice often boils down to efficiency and suitability for the task at hand. For tasks requiring compact storage, fast processing, and efficient manipulation, numbers usually offer significant advantages over letters or words. This principle of choosing the right data type for the right purpose is fundamental in the field of computer science and data management. 🌍💾🚀&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;p&gt;Barnett R.; O&amp;rsquo;Cull L.; Cox, S. Embedded C Programming and the Microship PIC. Delmar Learning, ed. 1, 2004.&lt;/p&gt;
&lt;p&gt;Cadenhead, R.; Liberty, J. Sams Teach Yoirself C++. Pearson Education, ed. 6, 2017.&lt;/p&gt;
&lt;p&gt;C Data Types - &lt;a href=&#34;https://en.wikipedia.org/wiki/C_data_types&#34;&gt;https://en.wikipedia.org/wiki/C_data_types&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;citation&#34;&gt;Citation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;For attribution, please cite this work as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;div-1&#34;&gt;
Oliveira T.P. (2020, Dec. 16). Signed and Unsigned Binary Numbers
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;BibTeX citation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@misc{oliveira2020signed,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  author = {Oliveira, Thiago},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  title = {Signed and Unsigned Binary Numbers},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  url = {https://prof-thiagooliveira.netlify.app/post/signed-and-unsigned-binary-numbers/},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  year = {2020}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
